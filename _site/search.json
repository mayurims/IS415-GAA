[
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "title": "In-Class Excercise 5",
    "section": "",
    "text": "# sfdep (gonna use for the take home excercise 2)\npacman::p_load(tidyverse, tmap, sf, sfdep)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#visualizing-the-sf-layers",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#visualizing-the-sf-layers",
    "title": "In-Class Excercise 5",
    "section": "Visualizing the sf layers",
    "text": "Visualizing the sf layers\n\ntmap_mode(\"view\")\ntm_shape(studyArea)+\n  tm_polygons()+\ntm_shape(stores)+\n  tm_dots(col = \"Name\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5)+\n  tm_view(set.zoom.limits = c(12, 16))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take-Home Excercise 01",
    "section": "",
    "text": "Talk about water situation in Nigeria\nTalk about water situation in Oson state\nTalk about the Osun river and its myth\nObjective of the assignment and elaborate\n\n\n\n\nOsun River"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#packages-used",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#packages-used",
    "title": "Take-Home Excercise 01",
    "section": "2.1 Packages Used",
    "text": "2.1 Packages Used\n\nsf : Used for ..\ntidyverse : Used for ..\ntmap :\nspatstat :\nraster :\nmaptools :\nrgdal :\n\n\n\npacman::p_load(sf, maptools, raster, spatstat, tmap, kableExtra, tidyverse, funModeling)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#datasets-used",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#datasets-used",
    "title": "Take-Home Excercise 01",
    "section": "2.2 Datasets Used",
    "text": "2.2 Datasets Used\n\n# initialise a dataframe of our geospatial and aspatial dataset details\ndatasets <- data.frame(\n  Type=c(\"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \n         \"Aspatial\"),\n  \n  Name=c(\"geoBoundaries-NGA-ADM2\",\n         \"geoBoundaries-NGA-ADM2\",\n         \"geoBoundaries-NGA-ADM2\",\n         \"geoBoundaries-NGA-ADM2\",\n         \"geoBoundaries-NGA-ADM2\",\n         \"geoBoundaries-NGA-ADM2\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \n         \"WPdx\"),\n  \n  Format=c(\".dbf\", \n           \".geojson\", \n           \".prj\", \n           \".shp\", \n           \".shx\", \n           \".topojson\",\n           \".CPG\",\n           \".dbf\",\n           \".prj\",\n           \".sbn\", \n           \".sbx\", \n           \".shp\", \n           \".shp\", \n           \".shx\", \n          \n           \".csv\"),\n  \n  Source=c(\"[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)\",\n           \"[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)\",\n           \"[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)\",\n           \"[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)\",\n           \"[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)\",\n           \"[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)\",\n           \n          \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \n           \"[ WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/)\")\n  )\n\n# with reference to this guide on kableExtra:\n# https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html\n# kable_material is the name of the kable theme\n# 'hover' for to highlight row when hovering, 'scale_down' to adjust table to fit page width\nlibrary(knitr)\nlibrary(kableExtra)\nkable(datasets, caption=\"Datasets Used\") %>%\n  kable_material(\"hover\", latex_options=\"scale_down\")\n\n\n\nDatasets Used\n \n  \n    Type \n    Name \n    Format \n    Source \n  \n \n\n  \n    Geospatial \n    geoBoundaries-NGA-ADM2 \n    .dbf \n    [geoBoundaries](https://www.geoboundaries.org/index.html#getdata) \n  \n  \n    Geospatial \n    geoBoundaries-NGA-ADM2 \n    .geojson \n    [geoBoundaries](https://www.geoboundaries.org/index.html#getdata) \n  \n  \n    Geospatial \n    geoBoundaries-NGA-ADM2 \n    .prj \n    [geoBoundaries](https://www.geoboundaries.org/index.html#getdata) \n  \n  \n    Geospatial \n    geoBoundaries-NGA-ADM2 \n    .shp \n    [geoBoundaries](https://www.geoboundaries.org/index.html#getdata) \n  \n  \n    Geospatial \n    geoBoundaries-NGA-ADM2 \n    .shx \n    [geoBoundaries](https://www.geoboundaries.org/index.html#getdata) \n  \n  \n    Geospatial \n    geoBoundaries-NGA-ADM2 \n    .topojson \n    [geoBoundaries](https://www.geoboundaries.org/index.html#getdata) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .CPG \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .dbf \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .prj \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .sbn \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .sbx \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .shp \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .shp \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .shx \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Aspatial \n    WPdx \n    .csv \n    [ WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-geospatial-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-geospatial-data",
    "title": "Take-Home Excercise 01",
    "section": "3.1 Importing Geospatial Data",
    "text": "3.1 Importing Geospatial Data\n\nNGA <- st_read(\"data/geospatial\", \n                  layer = \"nga_admbnda_adm2_osgof_20190417\") %>%\n  filter(ADM1_EN == \"Osun\") %>%\n  st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\mayurims\\IS415-GAA\\Take-Home_Ex\\Take-Home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n(Talk about CRS)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-pre-processing",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-pre-processing",
    "title": "Take-Home Excercise 01",
    "section": "3.2 Data Pre-processing",
    "text": "3.2 Data Pre-processing\n\n3.2.1 Dropping Invalid Dimensions\nThere are no invalid dimensions, so not required\n\n\n3.2.2 Invalid Geometries\n\nlength(which(st_is_valid(NGA) == FALSE))\n\n[1] 0\n\n\nNone of the values are Invalid, so we are good to go!!\n\n\n3.2.3 Excluding Redundant Fields\nWhyy do we remove thesee redundant fields??\n\nNGA <- NGA %>%\n  select(c(3:4, 8:9))\n\n\n\n3.2.4 Missing Values\n\nNGA[rowSums(is.na(NGA))!=0,]\n\nSimple feature collection with 0 features and 4 fields\nBounding box:  xmin: NA ymin: NA xmax: NA ymax: NA\nProjected CRS: Minna / Nigeria Mid Belt\n[1] ADM2_EN    ADM2_PCODE ADM1_EN    ADM1_PCODE geometry  \n<0 rows> (or 0-length row.names)\n\n\n\n\n3.2.5 Checking for Duplicated Names\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\ncharacter(0)\n\n\n\n\n3.2.6 Initial Visualization\n\nplot(st_geometry(NGA))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-aspatial-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-aspatial-data",
    "title": "Take-Home Excercise 01",
    "section": "4.1 Importing Aspatial Data",
    "text": "4.1 Importing Aspatial Data\n\nwp_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\" & `#clean_adm1` == \"Osun\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-water-point-data-into-sf-point-features",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-water-point-data-into-sf-point-features",
    "title": "Take-Home Excercise 01",
    "section": "4.2 Converting water point data into sf point features",
    "text": "4.2 Converting water point data into sf point features\nConverting an aspatial data into an sf data.frame involves two steps.\nFirst, we need to convert the wkt field into sfc field by using st_as_sfc() data type.\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nNext, we will convert the tibble data.frame into an sf object by using st_sf(). It is also important for us to include the referencing system of the data into the sf object.\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 5557 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4.032004 ymin: 7.060309 xmax: 5.06 ymax: 8.061898\nGeodetic CRS:  WGS 84\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-wrangling-for-water-data-point",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-wrangling-for-water-data-point",
    "title": "Take-Home Excercise 01",
    "section": "4.3 Data Wrangling for Water Data Point",
    "text": "4.3 Data Wrangling for Water Data Point\n\nfreq(data = wp_sf,\n     input = '#status_clean')\n\n\n\n\n                     #status_clean frequency percentage cumulative_perc\n1                       Functional      2319      41.73           41.73\n2                   Non-Functional      2008      36.13           77.86\n3                             <NA>       748      13.46           91.32\n4      Functional but needs repair       248       4.46           95.78\n5 Non-Functional due to dry season       151       2.72           98.50\n6        Functional but not in use        63       1.13           99.63\n7                        Abandoned        15       0.27           99.90\n8         Abandoned/Decommissioned         5       0.09          100.00\n\n\n\nwp_sf_nga <- wp_sf %>% \n  rename(status_clean = '#status_clean') %>%\n  select(status_clean) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"))\n\n\n4.3.1 Extracting Water Point Data\nNow we are ready to extract the water point data according to their status.\nThe code chunk below is used to extract functional water point.\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\nThe code chunk below is used to extract nonfunctional water point.\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\nThe code chunk below is used to extract water point with unknown status.\n\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")\n\nPerforming a quick EDA on the derived sfa.dataframes\n\nfreq(data = wp_functional,\n     input = 'status_clean')\n\n\n\n\n                 status_clean frequency percentage cumulative_perc\n1                  Functional      2319      88.17           88.17\n2 Functional but needs repair       248       9.43           97.60\n3   Functional but not in use        63       2.40          100.00\n\n\n\nfreq(data = wp_nonfunctional,\n     input = 'status_clean')\n\n\n\n\n                      status_clean frequency percentage cumulative_perc\n1                   Non-Functional      2008      92.15           92.15\n2 Non-Functional due to dry season       151       6.93           99.08\n3                        Abandoned        15       0.69           99.77\n4         Abandoned/Decommissioned         5       0.23          100.00\n\n\n\nfreq(data = wp_unknown,\n     input = 'status_clean')\n\n\n\n\n  status_clean frequency percentage cumulative_perc\n1      unknown       748        100             100\n\n\n\n\n4.3.2 Performing Point-In Polygon Count\nNext, we want to find out the number of total, functional, nonfunctional and unknown water points in each LGA. This is performed in the following code chunk. First, it identifies the functional water points in each LGA by using st_intersects() of sf package. Next, length() is used to calculate the number of functional water points that fall inside each LGA.\n\nNGA_wp <- NGA %>% \n  mutate(`total_wp` = lengths(\n    st_intersects(NGA, wp_sf_nga))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(NGA, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(NGA, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA, wp_unknown)))\nNGA_wp\n\nSimple feature collection with 30 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 176503.2 ymin: 331434.7 xmax: 291043.8 ymax: 454520.1\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 10 features:\n          ADM2_EN ADM2_PCODE ADM1_EN ADM1_PCODE                       geometry\n1        Aiyedade   NG030001    Osun      NG030 MULTIPOLYGON (((213526.6 34...\n2        Aiyedire   NG030002    Osun      NG030 MULTIPOLYGON (((212542.6 40...\n3  Atakumosa East   NG030003    Osun      NG030 MULTIPOLYGON (((265746.8 37...\n4  Atakumosa West   NG030004    Osun      NG030 MULTIPOLYGON (((248871.4 40...\n5      Boluwaduro   NG030005    Osun      NG030 MULTIPOLYGON (((266092.2 43...\n6          Boripe   NG030006    Osun      NG030 MULTIPOLYGON (((255072.5 43...\n7       Ede North   NG030007    Osun      NG030 MULTIPOLYGON (((236386.9 41...\n8       Ede South   NG030008    Osun      NG030 MULTIPOLYGON (((236386.9 41...\n9        Egbedore   NG030009    Osun      NG030 MULTIPOLYGON (((220756 4317...\n10         Ejigbo   NG030010    Osun      NG030 MULTIPOLYGON (((214422.1 42...\n   total_wp wp_functional wp_nonfunctional wp_unknown\n1       389           157              154         78\n2       175            89               57         29\n3       223            98               92         33\n4       246           111              103         32\n5       129            63               51         15\n6       177            79               85         13\n7       216           141               50         25\n8       146            72               39         35\n9       142            63               44         35\n10      434           274              126         34\n\n\nWe then visualise attributes by using statistcal graph. In this code chunk below, appropriate functions of ggplot2 package is used to reveal the distribution of total water points by LGA in histogram.\n\nggplot(data = NGA_wp,\n       aes(x = total_wp)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    total_wp, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=0.8) +\n  ggtitle(\"Distribution of total water points by LGA\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-sf-data-frames-to-sps-spatial-class",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-sf-data-frames-to-sps-spatial-class",
    "title": "Take-Home Excercise 01",
    "section": "5.1 Converting sf data frames to sp’s Spatial* Class",
    "text": "5.1 Converting sf data frames to sp’s Spatial* Class\n\nwp_functional_spatial = as_Spatial(wp_functional)\nwp_nonfunctional_spatial = as_Spatial(wp_nonfunctional)\nNGA_spatial <- as_Spatial(NGA)\n\n\nNGA_spatial\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       :  ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE \nmin values  : Aiyedade,   NG030001,    Osun,      NG030 \nmax values  :   Osogbo,   NG030030,    Osun,      NG030 \n\n\n\nwp_functional_spatial\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2630 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :              status_clean \nmin values  :                Functional \nmax values  : Functional but not in use \n\n\n\nwp_nonfunctional_spatial\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2179 \nextent      : 180539, 290616, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :                     status_clean \nmin values  :                        Abandoned \nmax values  : Non-Functional due to dry season"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-from-spatial-classes-to-sp-format",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-from-spatial-classes-to-sp-format",
    "title": "Take-Home Excercise 01",
    "section": "5.2 Converting from Spatial* classes to sp format",
    "text": "5.2 Converting from Spatial* classes to sp format\n\n# convert into respective sp (in our case, either polygons or points)\nwp_functional_sp <- as(wp_functional_spatial, \"SpatialPoints\")\nwp_nonfunctional_sp <- as(wp_nonfunctional_spatial, \"SpatialPoints\")\nNGA_sp <-as(NGA_spatial, \"SpatialPolygons\")\n\n\nwp_functional_sp\n\nclass       : SpatialPoints \nfeatures    : 2630 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nwp_nonfunctional_sp\n\nclass       : SpatialPoints \nfeatures    : 2179 \nextent      : 180539, 290616, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nNGA_sp\n\nclass       : SpatialPolygons \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-from-sp-format-to-spatstat-ppp-format",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-from-sp-format-to-spatstat-ppp-format",
    "title": "Take-Home Excercise 01",
    "section": "5.3 Converting from sp format to spatstat ppp format",
    "text": "5.3 Converting from sp format to spatstat ppp format\nNote that there is no way of coercing SpatialPolygons to ppp format - nor is there any need to. As such, we won’t be including our ‘base maps’, geoNGA and NGA.\n\n# from sp object, convert into ppp format\nwp_functional_ppp <- as(wp_functional_sp, \"ppp\")\nwp_nonfunctional_ppp <- as(wp_nonfunctional_sp, \"ppp\")\n\n\npar(mfrow=c(1,2))\nplot(wp_nonfunctional_ppp)\nplot(wp_functional_ppp)\n\n\n\n\n\n5.3.1 Handling Duplicated Points + Jittering\n\nany(duplicated(wp_functional_ppp)) \n\n[1] FALSE\n\n\n\nany(duplicated(wp_nonfunctional_ppp)) \n\n[1] FALSE\n\n\nSince there is no duplication, we dont have to apply the process of Jittering."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#creating-owin-object",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#creating-owin-object",
    "title": "Take-Home Excercise 01",
    "section": "5.4 Creating Owin Object",
    "text": "5.4 Creating Owin Object\n\nNGA_owin <- as(NGA_sp, \"owin\")\nplot(NGA_owin)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#combining-point-events-object-and-owin-object",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#combining-point-events-object-and-owin-object",
    "title": "Take-Home Excercise 01",
    "section": "5.5 Combining point events object and owin object",
    "text": "5.5 Combining point events object and owin object\n\nwp_functional_ppp = wp_functional_ppp[NGA_owin]\nwp_nonfunctional_ppp = wp_nonfunctional_ppp[NGA_owin]\n\n\npar(mfrow=c(1,2))\nplot(wp_nonfunctional_ppp)\nplot(wp_functional_ppp)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#kernel-density-estimation",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#kernel-density-estimation",
    "title": "Take-Home Excercise 01",
    "section": "6.1 Kernel Density Estimation",
    "text": "6.1 Kernel Density Estimation\n\n6.1.1 Computing Kernel Density Estimation\nComputing using Automatic Bandwidth selection method\nExplain (Hands on ex 5)\n\nkde_wpfunctional_bw <- density(wp_functional_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nkde_wpnonfunctional_bw <- density(wp_nonfunctional_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\npar(mfrow=c(1,2))\nplot(kde_wpfunctional_bw,\n     main = \"Functional Water Points\",\n     ribside=c(\"right\"))\nplot(kde_wpnonfunctional_bw,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"right\"))\n\n\n\n\nComputing using Adaptive Bandwidth selection method\n\nkde_wpfunctional_adaptive <- adaptive.density(wp_functional_ppp, method=\"kernel\")\n\nkde_wpnonfunctional_adaptive <- adaptive.density(wp_nonfunctional_ppp, method=\"kernel\")\n\npar(mfrow=c(1,2))\nplot(kde_wpfunctional_adaptive,\n     main = \"Functional Water Points\",\n     ribside=c(\"right\"))\nplot(kde_wpnonfunctional_adaptive,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"right\"))\n\n\n\n\nComparing Automated and Adapting Bandwith Methods (side-by-side)\n\npar(mfrow=c(1,2))\nplot(kde_wpfunctional_bw,\n     main = \"Functional Water Points\",\n     ribside=c(\"right\"))\nplot(kde_wpfunctional_adaptive,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"right\"))\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(kde_wpnonfunctional_bw,\n     main = \"Functional Water Points\",\n     ribside=c(\"right\"))\nplot(kde_wpnonfunctional_adaptive,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"right\"))\n\n\n\n\n\n\n6.1.2 Rescalling KDE Values\nAs we can those values are small, so rescale() is used to covert the unit of measurement from meter to kilometer. ELABORATEE\n\nwp_functional_ppp_km <- rescale(wp_functional_ppp, 1000, \"km\")\nwp_nonfunctional_ppp_km <- rescale(wp_nonfunctional_ppp, 1000, \"km\")\n\nNow we replot the graphs\n\nAutomated Bandwitch Method\n\nkde_wpfunctional_km <- density(wp_functional_ppp_km,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nkde_wpnonfunctional_km <- density(wp_nonfunctional_ppp_km,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\npar(mfrow=c(1,2))\nplot(kde_wpfunctional_bw,\n     main = \"Functional Water Points\",\n     ribside=c(\"right\"))\nplot(kde_wpnonfunctional_bw,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"right\"))\n\n\n\n\nAdaptive Bandwidth Method\n\nkde_wpfunctional_adaptive_km <- adaptive.density(wp_functional_ppp_km, method=\"kernel\")\n\nkde_wpnonfunctional_adaptive_km <- adaptive.density(wp_nonfunctional_ppp_km, method=\"kernel\")\n\npar(mfrow=c(1,2))\nplot(kde_wpfunctional_adaptive,\n     main = \"Functional Water Points\",\n     ribside=c(\"right\"))\nplot(kde_wpnonfunctional_adaptive,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"right\"))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-kde-output-into-grid-object",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-kde-output-into-grid-object",
    "title": "Take-Home Excercise 01",
    "section": "6.2 Converting KDE output into grid object",
    "text": "6.2 Converting KDE output into grid object\n\ngridded_wpfunctional <- as.SpatialGridDataFrame.im(kde_wpfunctional_km)\ngridded_wpnonfunctional <- as.SpatialGridDataFrame.im(kde_wpnonfunctional_km)\n\nspplot(gridded_wpfunctional)\n\n\n\nspplot(gridded_wpnonfunctional)\n\n\n\n\n\n6.2.1 Converting Gridded Output into Raster\n\nkde_wpfunctional_raster <- raster(gridded_wpfunctional)\nkde_wpfunctional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -5.092436e-15, 25.49435  (min, max)\n\n\n\nkde_wpnonfunctional_raster <- raster(gridded_wpnonfunctional)\nkde_wpnonfunctional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -3.925434e-15, 20.49412  (min, max)\n\n\n\n\n6.2.2 Assigning Projection Systems\n\nprojection(kde_wpfunctional_raster) <- CRS(\"+init=EPSG:26392 +datum:WGS84 +units=km\")\nkde_wpfunctional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26392 +datum:WGS84 +units=km \nsource     : memory\nnames      : v \nvalues     : -5.092436e-15, 25.49435  (min, max)\n\n\n\nprojection(kde_wpnonfunctional_raster) <- CRS(\"+init=EPSG:26392 +datum:WGS84 +units=km\")\nkde_wpnonfunctional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +init=EPSG:26392 +datum:WGS84 +units=km \nsource     : memory\nnames      : v \nvalues     : -3.925434e-15, 20.49412  (min, max)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#kernel-density-maps-on-openstreetmap",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#kernel-density-maps-on-openstreetmap",
    "title": "Take-Home Excercise 01",
    "section": "6.3 Kernel Density Maps on OpenStreetMap",
    "text": "6.3 Kernel Density Maps on OpenStreetMap\nNow, as the assignment requirements has specified, we should plot our kernel density maps on OpenStreetMap, aiming to describe the spatial patterns revealed as well as highlight the advantage of kernel density map over point map. Since we’ll be plotting a lot of kernel density maps, let’s create a function:\n\ndensity_map <- function(raster_object, map_title) {\n  tmap_mode(\"view\")\n  tm_basemap(\"OpenStreetMap\") +\ntm_shape(raster_object) +\n  tm_raster(\"v\", alpha=0.9) + \n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            legend.height = 0.5, \n            legend.width = 0.4,\n            main.title = map_title,\n            main.title.position = 'center',\n            main.title.size = 1,\n            frame = TRUE) + \n  tm_view(set.zoom.limits = c(8, 13))\n  } \n\n\nkde_wpfunctional_density_map <- density_map(kde_wpfunctional_raster, map_title = \"Functional Water Points in Osun State\")\nkde_wpnonfunctional_density_map <- density_map(kde_wpnonfunctional_raster, map_title = \"Non-Functional Water Points in Osun State\")\n\n\nkde_wpfunctional_density_map\n\n\n\n\n\n\nkde_wpnonfunctional_density_map\n\n\n\n\n\n\ntmap_mode('plot')\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(kde_wpfunctional_raster) +\n  tm_raster(\"v\")\n\n\n\n\n\ntmap_mode('plot')\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(kde_wpnonfunctional_raster) +\n  tm_raster(\"v\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#kernel-density-maps-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#kernel-density-maps-analysis",
    "title": "Take-Home Excercise 01",
    "section": "6.4 Kernel Density Maps Analysis",
    "text": "6.4 Kernel Density Maps Analysis\nAs we can see in the map in 5.5, both the plots are similar with the Functional Water Point being comparatively a bit more denser (more point) than the Non-Functional Water Point. From the maps above, we can see that both the Functional and Non-Functional waterpoints are spread out, however, they are more concentrated in the center and the upper part of Osun. We don’t see that many waterpoints in lower part of Osun.\nThe Functional Water Points are slightly more spread out compared to the Non Functional Water Points, however, what is interesting to note is that the points in both the maps kind of coincide with each other. That is the points in the Functional Water Point seem to be close to that of the Non-Functional Water Point."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#advantage-of-kernel-density-map-over-point-map",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#advantage-of-kernel-density-map-over-point-map",
    "title": "Take-Home Excercise 01",
    "section": "6.5 Advantage of Kernel Density Map over Point Map",
    "text": "6.5 Advantage of Kernel Density Map over Point Map\nTo understand the advantage of Kernel Density Map over Point Map, we first need to plot the two and compare the differences.\n\ntmap_mode(\"plot\")\ntm_shape(NGA_wp) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(wp_nonfunctional) +\n  tm_dots(col=\"red\", size=0.05) +\n  tm_layout(main.title = \"Non-Functional Water Points\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)\n\n\n\n\n\nkde_wpnonfunctional_density_map\n\n\n\n\nWith the Kernel Density Map, denser areas with a heavier distribution of Non-Functional Water Points are easily spotted. This is because the kernel density z-estimate helps to smooth out the points in a given area. Compared to the point map which just shows the points. Further, the gradient colour available (ranging from yellow to green) helps in understanding the density/concentration of water pumps in the area. It clearly shows the viewer which are the areas with more non-functional water pumps, however, with the point map, the users have to gauge/estimate which are the densers with more non-functional water points.\nHence to conclude, the Kernal Density provides a quantitative value representing the concentration of points, where as this can only be observed/gauged in Point Map.\n\nWith kernel density maps, it takes into account the inverse-distance-weighted counts of points, to represent the concentration of points at a particular location. This cannot be achieved through observation using point maps.\nThe inverse-distance-weighted counts is important because in the real-world, childcare centres that are further away from a particular location does not mean that they cannot potentially serve the population. These points should still be taken into account, just that points further away should just be given less weight, as people will have to travel further to access the childcare service. This is exactly what is accounted for with kernel function."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#nearest-neighbour-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#nearest-neighbour-analysis",
    "title": "Take-Home Excercise 01",
    "section": "6.6?? Nearest Neighbour Analysis",
    "text": "6.6?? Nearest Neighbour Analysis\nThe 95% confident interval will be used.\nThe test hypotheses for Functional Water Point is :\nH0 : The distribution of Functional Water Point in Osun State is randomly distributed.\nH1 : The distribution of Functional Water Point in Osun State is not randomly distributed.\n\nclarkevans.test(wp_functional_ppp,\n                correction=\"none\",\n                clipregion=\"NGA_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  wp_functional_ppp\nR = 0.44265, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\nConclusion :\nThe test hypotheses for Non-Functional Water Point is :\nH0 : The distribution of Non-Functional Water Point in Osun State is randomly distributed.\nH1 : The distribution of Non-Functional Water Point in Osun State is not randomly distributed.\n\nclarkevans.test(wp_nonfunctional_ppp,\n                correction=\"none\",\n                clipregion=\"nga_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  wp_nonfunctional_ppp\nR = 0.43223, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\nConclusion :"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-g-function",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-g-function",
    "title": "Take-Home Excercise 01",
    "section": "7.1 Analysing Spatial Point Process Using G-Function",
    "text": "7.1 Analysing Spatial Point Process Using G-Function\n\n7.1.1 Functional Water Point\nComputing G-function estimation\n\nG_wp_functional = Gest(wp_functional_ppp, correction = \"border\")\nplot(G_wp_functional, xlim=c(0,500))\n\n\n\n\nPerforming Complete Spatial Randomness Test\n\n#G_wp_functional.csr <- envelope(wp_functional_ppp, Gest, nsim = 999)\n\n\n#plot(G_wp_functional.csr)\n\n\n\n7.1.2 Non-Functional Water Point\nComputing G-function estimation\n\n#G_wp_nonfunctional = Gest(wp_nonfunctional_ppp, correction = \"border\")\n#plot(G_wp_nonfunctional, xlim=c(0,500))\n\nPerforming Complete Spatial Randomness Test\n\n#G_wp_nonfunctional.csr <- envelope(wp_functional_ppp, Gest, nsim = 999)\n\n\n#plot(G_wp_nonfunctional.csr)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-f-function",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-f-function",
    "title": "Take-Home Excercise 01",
    "section": "7.2 Analysing Spatial Point Process using F-Function",
    "text": "7.2 Analysing Spatial Point Process using F-Function\n\n7.2.1 Functional Water Points\nComputing F-function estimation\n\n#F_wp_functional = Fest(wp_functional_ppp)\n#plot(F_wp_functional)\n\nPerforming Complete Spatial Randomness Test\n\n#F_wp_functional.csr <- envelope(wp_functional_ppp, Fest, nsim = 999)\n\n\n#plot(F_wp_functional.csr)\n\n\n\n7.2.2 Non-Functional Water Points\nComputing F-function estimation\n\n#F_wp_nonfunctional = Fest(wp_nonfunctional_ppp, correction=\"best\")\n#plot(F_wp_functional)\n\nPerforming Complete Spatial Randomness Test\n\n#F_wp_nonfunctional.csr <- envelope(wp_nonfunctional_ppp, Fest, nsim = 999)\n\n\n#plot(F_wp_nonfunctional.csr)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-k-function",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-k-function",
    "title": "Take-Home Excercise 01",
    "section": "7.3 Analysing Spatial Point Process Using K-Function",
    "text": "7.3 Analysing Spatial Point Process Using K-Function\n\n7.3.1 Functional Water Point\nComputing K-function estimate\n\n#K_wp_functional = Kest(wp_functional_ppp, correction = \"Ripley\")\n#plot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\nPerforming Complete Spatial Randomness\n\n#K_wp_functional.csr <- envelope(wp_functional_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\n\n#plot(K_wp_functional.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n7.3.1 Non-Functional Water Point\nComputing K-function estimate\n\n#K_wp_nonfunctional = Kest(wp_nonfunctional_ppp, correction = \"Ripley\")\n#plot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\nPerforming Complete Spatial Randomness\n\n#K_wp_nonfunctional.csr <- envelope(wp_nonfunctional_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\n\n#plot(K_wp_nonfunctional.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-l-function",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-l-function",
    "title": "Take-Home Excercise 01",
    "section": "7.4 Analysing Spatial Point Process using L-Function",
    "text": "7.4 Analysing Spatial Point Process using L-Function\n\n7.4.1 Functional Water Point\nComputing L-function estimate\n\n#L_wp_functional = Lest(wp_functional_ppp, correction = \"Ripley\")\n#plot(L_wp_functional_ppp, . -r ~ r, \n     #ylab= \"L(d)-r\", xlab = \"d(m)\")\n\nPerforming Complete Spatial Randomness\n\n#L_wp_functional.csr <- envelope(wp_functional_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\n\n#plot(L_wp_functional.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n7.4.1 Non-Functional Water Point\nComputing L-function estimate\n\n#L_wp_nonfunctional = Lest(wp_nonfunctional_ppp, correction = \"Ripley\")\n#plot(L_tm, . -r ~ r, \n     #ylab= \"L(d)-r\", xlab = \"d(m)\", \n     #xlim=c(0,1000))\n\nPerforming Complete Spatial Randomness\n\n#L_wp_nonfunctional.csr <- envelope(wp_nonfunctional_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\n\n#plot(L_wp_nonfunctional.csr, . - r ~ r, \n     #xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))\n\nAnalysis :"
  }
]