[
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html",
    "title": "In-Class Excercise 5",
    "section": "",
    "text": "# sfdep (gonna use for the take home excercise 2)\npacman::p_load(tidyverse, tmap, sf, sfdep)"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#visualizing-the-sf-layers",
    "href": "In-Class_Ex/In-Class_Ex05/In-Class_Ex05.html#visualizing-the-sf-layers",
    "title": "In-Class Excercise 5",
    "section": "Visualizing the sf layers",
    "text": "Visualizing the sf layers\n\ntmap_mode(\"view\")\ntm_shape(studyArea)+\n  tm_polygons()+\ntm_shape(stores)+\n  tm_dots(col = \"Name\",\n          size = 0.01,\n          border.col = \"black\",\n          border.lwd = 0.5)+\n  tm_view(set.zoom.limits = c(12, 16))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html",
    "title": "Take-Home Excercise 01",
    "section": "",
    "text": "Water is an essential part of our life, without which we won’t be able to survive for more than 3 days. Living in Singapore, we have access to clean drinkable water 24/7 and as a result we don’t realize the struggles of people who don’t have access to clean water at all. An an example of such are the people in Nigeria. Despite 70% of Nigerians having access to basic water services, more than half of them are contamintated (Reference).\nFor this assignment, we will be focusing on the State of Osun in Nigeria. Osun, located in the southwestern Nigeria is bounded to the east by Ekiti and Ondo states, Kwara on the north, Ogun to the south and to the west by Oyo State (Reference). Their economy is mainly based on the agriculture and it inhibits the Osun River, a sacred river. However, in the recent years, the river has been polluted by the several mining activities from the surrounding communities (Reference). Hence, it is integral for us to address the issue of providing clean and sustainable water to the people of Osun. Through this assignment, I aim to apply the relevant spatial point pattern analysis learned in class to analyse the Functional and Non-Functional water points in State of Osun, Nigera.\n\n\n\nOsun River"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#packages-used",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#packages-used",
    "title": "Take-Home Excercise 01",
    "section": "2.1 Packages Used",
    "text": "2.1 Packages Used\n\nsf : Used for importing geospatial data, assigning or transforming coordinate systems, and converting geospatial and aspatial data into a sf data frame\ntidyverse : Used for transforming and better presentation of Data\ntmap : Used for plotting static point patterns maps or interactive maps\nspatstat : Used for point-pattern analysis\nraster : Used to read, write, manipulate, analyse and model gridded spatial data\nmaptools : Used to provide a set of tools for manipulating geographic data\nkableExtra : Used for table customization\nfunModeling : Used to data cleaning, importance variable, analysis and model performance\nsfdep :Used for functions creates not present in spdep.\n\n\npacman::p_load(sf, maptools, raster, spatstat, tmap, kableExtra, tidyverse, funModeling, sfdep)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#datasets-used",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#datasets-used",
    "title": "Take-Home Excercise 01",
    "section": "2.2 Datasets Used",
    "text": "2.2 Datasets Used\nThe below diagram shows the datasets used for the Assignment. We have two types of data - geospatial and aspatial.\nFor the Aspatial data, we are extracting the data from WPdx Global Data Repositories. The data source consists of two types of data - WPdx-Basic and WPdx+, for the purpose of this project, we will be using the WPdx+.\nFor the Geospatial data, we will be using the Nigeria Level-2 Administrative Boundary polygon features GIS data. There are two data source for this - Humanitarian Data Exchange (HDE) and geoBoundaries.\n\n# initialise a dataframe of our geospatial and aspatial dataset details\ndatasets <- data.frame(\n  Type=c(\"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \"Geospatial\",\n         \n         \"Aspatial\"),\n  \n  Name=c(\"geoBoundaries-NGA-ADM2\",\n         \"geoBoundaries-NGA-ADM2\",\n         \"geoBoundaries-NGA-ADM2\",\n         \"geoBoundaries-NGA-ADM2\",\n         \"geoBoundaries-NGA-ADM2\",\n         \"geoBoundaries-NGA-ADM2\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \"nga_admbnda_adm2_osgof_20190417\",\n         \n         \"WPdx\"),\n  \n  Format=c(\".dbf\", \n           \".geojson\", \n           \".prj\", \n           \".shp\", \n           \".shx\", \n           \".topojson\",\n           \".CPG\",\n           \".dbf\",\n           \".prj\",\n           \".sbn\", \n           \".sbx\", \n           \".shp\", \n           \".shp\", \n           \".shx\", \n          \n           \".csv\"),\n  \n  Source=c(\"[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)\",\n           \"[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)\",\n           \"[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)\",\n           \"[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)\",\n           \"[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)\",\n           \"[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)\",\n           \n          \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \"[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)\",\n           \n           \"[ WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/)\")\n  )\n\n# with reference to this guide on kableExtra:\n# https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html\n# kable_material is the name of the kable theme\n# 'hover' for to highlight row when hovering, 'scale_down' to adjust table to fit page width\nlibrary(knitr)\nlibrary(kableExtra)\nkable(datasets, caption=\"Datasets Used\") %>%\n  kable_material(\"hover\", latex_options=\"scale_down\")\n\n\n\nDatasets Used\n \n  \n    Type \n    Name \n    Format \n    Source \n  \n \n\n  \n    Geospatial \n    geoBoundaries-NGA-ADM2 \n    .dbf \n    [geoBoundaries](https://www.geoboundaries.org/index.html#getdata) \n  \n  \n    Geospatial \n    geoBoundaries-NGA-ADM2 \n    .geojson \n    [geoBoundaries](https://www.geoboundaries.org/index.html#getdata) \n  \n  \n    Geospatial \n    geoBoundaries-NGA-ADM2 \n    .prj \n    [geoBoundaries](https://www.geoboundaries.org/index.html#getdata) \n  \n  \n    Geospatial \n    geoBoundaries-NGA-ADM2 \n    .shp \n    [geoBoundaries](https://www.geoboundaries.org/index.html#getdata) \n  \n  \n    Geospatial \n    geoBoundaries-NGA-ADM2 \n    .shx \n    [geoBoundaries](https://www.geoboundaries.org/index.html#getdata) \n  \n  \n    Geospatial \n    geoBoundaries-NGA-ADM2 \n    .topojson \n    [geoBoundaries](https://www.geoboundaries.org/index.html#getdata) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .CPG \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .dbf \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .prj \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .sbn \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .sbx \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .shp \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .shp \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Geospatial \n    nga_admbnda_adm2_osgof_20190417 \n    .shx \n    [Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga) \n  \n  \n    Aspatial \n    WPdx \n    .csv \n    [ WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-geospatial-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-geospatial-data",
    "title": "Take-Home Excercise 01",
    "section": "3.1 Importing Geospatial Data",
    "text": "3.1 Importing Geospatial Data\n\nNGA <- st_read(\"data/geospatial\", \n                  layer = \"nga_admbnda_adm2_osgof_20190417\") %>%\n  filter(ADM1_EN == \"Osun\") %>%\n  st_transform(crs = 26392)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\mayurims\\IS415-GAA\\Take-Home_Ex\\Take-Home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n(Talk about CRS)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-pre-processing",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-pre-processing",
    "title": "Take-Home Excercise 01",
    "section": "3.2 Data Pre-processing",
    "text": "3.2 Data Pre-processing\n\n3.2.1 Dropping Invalid Dimensions\nSince, we only have one dataframe, there are no invalid dimensions, and hence, this step is not required.\n\n\n3.2.2 Invalid Geometries\nThe st_is_valid() function checks whether a geometry is valid and returns the indices. Whereas, the length gives you a count of the indices with invalid geometries.\n\nlength(which(st_is_valid(NGA) == FALSE))\n\n[1] 0\n\n\nNone of the values are Invalid, so we are good to go!!\n\n\n3.2.3 Checking for Duplicated Names\nWe need to check for duplicate name in the data main data fields. Using duplicated() of Base R, we can flag out LGA names that might be duplicated as shown in the code chunk below.\n\nNGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]\n\ncharacter(0)\n\n\nThere are no duplicated values, so we are good to go!\n\n\n3.2.4 Initial Visualization\n\nplot(st_geometry(NGA))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-aspatial-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-aspatial-data",
    "title": "Take-Home Excercise 01",
    "section": "4.1 Importing Aspatial Data",
    "text": "4.1 Importing Aspatial Data\nSince the WPdx data is in CSV format, we will use read_csv() of readr package to import WPdx.csv. The output is called wp_nga and is a tibble dataframe\n\nwp_nga <- read_csv(\"data/aspatial/WPdx.csv\") %>%\n  filter(`#clean_country_name` == \"Nigeria\" & `#clean_adm1` == \"Osun\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-water-point-data-into-sf-point-features",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-water-point-data-into-sf-point-features",
    "title": "Take-Home Excercise 01",
    "section": "4.2 Converting water point data into sf point features",
    "text": "4.2 Converting water point data into sf point features\nConverting an aspatial data into an sf data.frame involves two steps.\nFirst, we need to convert the wkt field into sfc field by using st_as_sfc() function. The function stores it in a tibble data format.\n\nwp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)\nwp_nga\n\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n    <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nNext, we use the st_sf() to convert the tibble data.frame into an sf object. It is also important for us to include the referencing system of the data into the sf object.\n\nwp_sf <- st_sf(wp_nga, crs=4326)\nwp_sf\n\nSimple feature collection with 5557 features and 70 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 4.032004 ymin: 7.060309 xmax: 5.06 ymax: 8.061898\nGeodetic CRS:  WGS 84\n# A tibble: 5,557 × 71\n   row_id `#source`      #lat_…¹ #lon_…² #repo…³ #stat…⁴ #wate…⁵ #wate…⁶ #wate…⁷\n *  <dbl> <chr>            <dbl>   <dbl> <chr>   <chr>   <chr>   <chr>   <chr>  \n 1 429123 GRID3             8.02    5.06 08/29/… Unknown <NA>    <NA>    Tapsta…\n 2  70566 Federal Minis…    7.32    4.79 05/11/… No      Protec… Well    Mechan…\n 3  70578 Federal Minis…    7.76    4.56 05/11/… No      Boreho… Well    Mechan…\n 4  66401 Federal Minis…    8.03    4.64 04/30/… No      Boreho… Well    Mechan…\n 5 422190 GRID3             7.87    4.88 08/29/… Unknown <NA>    <NA>    Tapsta…\n 6 422064 GRID3             7.7     4.89 08/29/… Unknown <NA>    <NA>    Tapsta…\n 7  65607 Federal Minis…    7.89    4.71 05/12/… No      Boreho… Well    Mechan…\n 8  68989 Federal Minis…    7.51    4.27 05/07/… No      Boreho… Well    <NA>   \n 9  67708 Federal Minis…    7.48    4.35 04/29/… Yes     Boreho… Well    Mechan…\n10  66419 Federal Minis…    7.63    4.50 05/08/… Yes     Boreho… Well    Hand P…\n# … with 5,547 more rows, 62 more variables: `#water_tech_category` <chr>,\n#   `#facility_type` <chr>, `#clean_country_name` <chr>, `#clean_adm1` <chr>,\n#   `#clean_adm2` <chr>, `#clean_adm3` <chr>, `#clean_adm4` <chr>,\n#   `#install_year` <dbl>, `#installer` <chr>, `#rehab_year` <lgl>,\n#   `#rehabilitator` <lgl>, `#management_clean` <chr>, `#status_clean` <chr>,\n#   `#pay` <chr>, `#fecal_coliform_presence` <chr>,\n#   `#fecal_coliform_value` <dbl>, `#subjective_quality` <chr>, …\n\n\nLike step 3.2 Data Pre-processing, we transform the projection from wgs84 to the appropriate projected coordinate system of Nigeria.\n\nwp_sf <- wp_sf %>%\n  st_transform(crs = 26392)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-wrangling-for-water-data-point",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-wrangling-for-water-data-point",
    "title": "Take-Home Excercise 01",
    "section": "4.3 Data Wrangling for Water Data Point",
    "text": "4.3 Data Wrangling for Water Data Point\nExploratory Data Analysis (EDA) helps to gain initial understanding of the data. The freq() of funModeling package is used to reveal the distribution of water point status visually.\n\nfreq(data = wp_sf,\n     input = '#status_clean')\n\n\n\n\n                     #status_clean frequency percentage cumulative_perc\n1                       Functional      2319      41.73           41.73\n2                   Non-Functional      2008      36.13           77.86\n3                             <NA>       748      13.46           91.32\n4      Functional but needs repair       248       4.46           95.78\n5 Non-Functional due to dry season       151       2.72           98.50\n6        Functional but not in use        63       1.13           99.63\n7                        Abandoned        15       0.27           99.90\n8         Abandoned/Decommissioned         5       0.09          100.00\n\n\nThe diagram shows that there are nine classes present in the ‘status_clean’ field. Hence, now we will be performing data wrangling tasks to create 3 data object - Functional, Non-Functional and Unknown.\nWe use rename() function from the dplyr package to rename the column from #status_clean to status_clean for easier handling in subsequent steps. select() is used to include status_clean in the output sf data.frame. We use the mutate() and replace_na() functions to recode all the NA values in status_clean into unknown.\n\nwp_sf_nga <- wp_sf %>% \n  rename(status_clean = '#status_clean') %>%\n  select(status_clean) %>%\n  mutate(status_clean = replace_na(\n    status_clean, \"unknown\"))\n\n\n4.3.1 Extracting Water Point Data\nNow we are ready to extract the water point data according to their status.\nThe code chunk below is used to extract functional water point.\n\nwp_functional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Functional\",\n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\nThe code chunk below is used to extract nonfunctional water point.\n\nwp_nonfunctional <- wp_sf_nga %>%\n  filter(status_clean %in%\n           c(\"Abandoned/Decommissioned\",\n             \"Abandoned\",\n             \"Non-Functional due to dry season\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\"))\n\nThe code chunk below is used to extract water point with unknown status.\n\nwp_unknown <- wp_sf_nga %>%\n  filter(status_clean == \"unknown\")\n\nPerforming a quick EDA on the derived sfa.dataframes\n\nfreq(data = wp_functional,\n     input = 'status_clean')\n\n\n\n\n                 status_clean frequency percentage cumulative_perc\n1                  Functional      2319      88.17           88.17\n2 Functional but needs repair       248       9.43           97.60\n3   Functional but not in use        63       2.40          100.00\n\n\n\nfreq(data = wp_nonfunctional,\n     input = 'status_clean')\n\n\n\n\n                      status_clean frequency percentage cumulative_perc\n1                   Non-Functional      2008      92.15           92.15\n2 Non-Functional due to dry season       151       6.93           99.08\n3                        Abandoned        15       0.69           99.77\n4         Abandoned/Decommissioned         5       0.23          100.00\n\n\n\nfreq(data = wp_unknown,\n     input = 'status_clean')\n\n\n\n\n  status_clean frequency percentage cumulative_perc\n1      unknown       748        100             100\n\n\nWe can see from the map below, the proportion of functional and non-functional water is quite similar.\n\ntmap_mode(\"view\")\ntm_shape(wp_functional) +\n tm_dots(col = \"status_clean\",\n         pal = \"blue\",\n         title = \"Functional\") +\ntm_shape(wp_nonfunctional) +\n tm_dots(col = \"status_clean\",\n         pal = \"red\",\n         title = \"Non-Functional\") +\n  tm_view(set.zoom.limits = c(8.5,15)) \n\n\n\n\n\n\n\n\n4.3.2 Performing Point-In Polygon Count\nNext, we want to find out the number of total, functional, nonfunctional and unknown water points in Osun State. This is performed in the following code chunk. First, it identifies the functional water points in each LGA by using st_intersects() of sf package. Next, length() is used to calculate the number of functional water points that fall inside each LGA.\n\nNGA_wp <- NGA %>% \n  mutate(`total_wp` = lengths(\n    st_intersects(NGA, wp_sf_nga))) %>%\n  mutate(`wp_functional` = lengths(\n    st_intersects(NGA, wp_functional))) %>%\n  mutate(`wp_nonfunctional` = lengths(\n    st_intersects(NGA, wp_nonfunctional))) %>%\n  mutate(`wp_unknown` = lengths(\n    st_intersects(NGA, wp_unknown)))\nNGA_wp\n\nSimple feature collection with 30 features and 8 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 176503.2 ymin: 331434.7 xmax: 291043.8 ymax: 454520.1\nProjected CRS: Minna / Nigeria Mid Belt\nFirst 10 features:\n          ADM2_EN ADM2_PCODE ADM1_EN ADM1_PCODE                       geometry\n1        Aiyedade   NG030001    Osun      NG030 MULTIPOLYGON (((213526.6 34...\n2        Aiyedire   NG030002    Osun      NG030 MULTIPOLYGON (((212542.6 40...\n3  Atakumosa East   NG030003    Osun      NG030 MULTIPOLYGON (((265746.8 37...\n4  Atakumosa West   NG030004    Osun      NG030 MULTIPOLYGON (((248871.4 40...\n5      Boluwaduro   NG030005    Osun      NG030 MULTIPOLYGON (((266092.2 43...\n6          Boripe   NG030006    Osun      NG030 MULTIPOLYGON (((255072.5 43...\n7       Ede North   NG030007    Osun      NG030 MULTIPOLYGON (((236386.9 41...\n8       Ede South   NG030008    Osun      NG030 MULTIPOLYGON (((236386.9 41...\n9        Egbedore   NG030009    Osun      NG030 MULTIPOLYGON (((220756 4317...\n10         Ejigbo   NG030010    Osun      NG030 MULTIPOLYGON (((214422.1 42...\n   total_wp wp_functional wp_nonfunctional wp_unknown\n1       389           157              154         78\n2       175            89               57         29\n3       223            98               92         33\n4       246           111              103         32\n5       129            63               51         15\n6       177            79               85         13\n7       216           141               50         25\n8       146            72               39         35\n9       142            63               44         35\n10      434           274              126         34\n\n\nWe then visualise attributes by using statistcal graph. We use functions of ggplot2 package to reveal the distribution of total water points in Osun’s LGA using histogram.\n\nggplot(data = NGA_wp,\n       aes(x = total_wp)) + \n  geom_histogram(bins=20,\n                 color=\"black\",\n                 fill=\"light blue\") +\n  geom_vline(aes(xintercept=mean(\n    total_wp, na.rm=T)),\n             color=\"red\", \n             linetype=\"dashed\", \n             size=0.8) +\n  ggtitle(\"Distribution of total water points\") +\n  xlab(\"No. of water points\") +\n  ylab(\"No. of\\nLGAs\") +\n  theme(axis.title.y=element_text(angle = 0))"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-sf-data-frames-to-sps-spatial-class",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-sf-data-frames-to-sps-spatial-class",
    "title": "Take-Home Excercise 01",
    "section": "5.1 Converting sf data frames to sp’s Spatial* Class",
    "text": "5.1 Converting sf data frames to sp’s Spatial* Class\nWe use the as_spatial() function to convert the three geospatial data from simple feature data frame to sp’s Spatial* class.\n\nwp_functional_spatial = as_Spatial(wp_functional)\nwp_nonfunctional_spatial = as_Spatial(wp_nonfunctional)\nNGA_spatial <- as_Spatial(NGA)\n\n\nNGA_spatial\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 4\nnames       :  ADM2_EN, ADM2_PCODE, ADM1_EN, ADM1_PCODE \nmin values  : Aiyedade,   NG030001,    Osun,      NG030 \nmax values  :   Osogbo,   NG030030,    Osun,      NG030 \n\n\n\nwp_functional_spatial\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2630 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :              status_clean \nmin values  :                Functional \nmax values  : Functional but not in use \n\n\n\nwp_nonfunctional_spatial\n\nclass       : SpatialPointsDataFrame \nfeatures    : 2179 \nextent      : 180539, 290616, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \nvariables   : 1\nnames       :                     status_clean \nmin values  :                        Abandoned \nmax values  : Non-Functional due to dry season"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-from-spatial-classes-to-sp-format",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-from-spatial-classes-to-sp-format",
    "title": "Take-Home Excercise 01",
    "section": "5.2 Converting from Spatial* classes to sp format",
    "text": "5.2 Converting from Spatial* classes to sp format\nIn order to use the spatstat for our analysis, we need our data to be in the ppp object form. Hence, we first need to convert them into Spatial object first and then into ppp object.\n\n# convert into respective sp (in our case, either polygons or points)\nwp_functional_sp <- as(wp_functional_spatial, \"SpatialPoints\")\nwp_nonfunctional_sp <- as(wp_nonfunctional_spatial, \"SpatialPoints\")\nNGA_sp <-as(NGA_spatial, \"SpatialPolygons\")\n\n\nwp_functional_sp\n\nclass       : SpatialPoints \nfeatures    : 2630 \nextent      : 177285.9, 290751, 343128.1, 450859.7  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nwp_nonfunctional_sp\n\nclass       : SpatialPoints \nfeatures    : 2179 \nextent      : 180539, 290616, 340054.1, 450780.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs \n\n\n\nNGA_sp\n\nclass       : SpatialPolygons \nfeatures    : 30 \nextent      : 176503.2, 291043.8, 331434.7, 454520.1  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +towgs84=-92,-93,122,0,0,0,0 +units=m +no_defs"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-from-sp-format-to-spatstat-ppp-format",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-from-sp-format-to-spatstat-ppp-format",
    "title": "Take-Home Excercise 01",
    "section": "5.3 Converting from sp format to spatstat ppp format",
    "text": "5.3 Converting from sp format to spatstat ppp format\nWe can’t convert SpatialPolygons to ppp format - nor is there any need to. Hence, we won’t be including our ‘base map’, NGA.\n\n# from sp object, convert into ppp format\nwp_functional_ppp <- as(wp_functional_sp, \"ppp\")\nwp_nonfunctional_ppp <- as(wp_nonfunctional_sp, \"ppp\")\n\nThe below map shows the point paterns for both functional and non-functional water points.\n\npar(mfrow=c(1,2))\nplot(wp_nonfunctional_ppp)\nplot(wp_functional_ppp)\n\n\n\n\n\n5.3.1 Handling Duplicated Points + Jittering\n\nany(duplicated(wp_functional_ppp)) \n\n[1] FALSE\n\n\n\nany(duplicated(wp_nonfunctional_ppp)) \n\n[1] FALSE\n\n\nSince there is no duplication, we dont have to apply the process of Jittering."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#creating-owin-object",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#creating-owin-object",
    "title": "Take-Home Excercise 01",
    "section": "5.4 Creating Owin Object",
    "text": "5.4 Creating Owin Object\nWe need to now confine the analysis with a geographical area - Osun State and we do this by creating a object called owin which represent the polygonal region. The below code covert the SpatialPolygon (NGA_sp) created into an owin object.\n\nNGA_owin <- as(NGA_sp, \"owin\")\nplot(NGA_owin)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#combining-point-events-object-and-owin-object",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#combining-point-events-object-and-owin-object",
    "title": "Take-Home Excercise 01",
    "section": "5.5 Combining point events object and owin object",
    "text": "5.5 Combining point events object and owin object\nIn this step, we extract the functional and non-functional water points that are located within Osun, Nigeria. This combines both the point and polygon feature into one ppp object class.\n\nwp_functional_ppp = wp_functional_ppp[NGA_owin]\nwp_nonfunctional_ppp = wp_nonfunctional_ppp[NGA_owin]\n\n\npar(mfrow=c(1,2))\nplot(wp_nonfunctional_ppp)\nplot(wp_functional_ppp)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#kernel-density-estimation",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#kernel-density-estimation",
    "title": "Take-Home Excercise 01",
    "section": "6.1 Kernel Density Estimation",
    "text": "6.1 Kernel Density Estimation\n\n6.1.1 Computing Kernel Density Estimation\nThere are two types of bandwidth methods - Fixed (Automatic) and Adaptive bandwidth method. These methods employ different uniform bases in density calculation.\nComputing using Automatic Bandwidth selection method\nWe can compute the kernel density by using the bw.ppl() or bw.diggle(). As learned in Chapter 04, the ppl() method is prefered for patterns consisting predominantly of prominent clusters. Whereas, bw.diggle() is best used to detect a single tight cluster in the midst of random noise.\nFrom the maps below, we can see that bw.ppl() method is better able to identify the prominent clusters as the data does not contain a single tight cluster. Hence, we will be using the bw.ppl() method.\n\nbw.diggle() Method\n\nkde_wpfunctional_bw_diggle <- density(wp_functional_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nkde_wpnonfunctional_bw_diggle <- density(wp_nonfunctional_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\npar(mfrow=c(1,2))\nplot(kde_wpfunctional_bw_diggle,\n     main = \"Functional Water Points\",\n     ribside=c(\"right\"))\nplot(kde_wpnonfunctional_bw_diggle,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"right\"))\n\n\n\n\nbw.ppl() Method\n\nkde_wpfunctional_bw <- density(wp_functional_ppp,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nkde_wpnonfunctional_bw <- density(wp_nonfunctional_ppp,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\n\npar(mfrow=c(1,2))\nplot(kde_wpfunctional_bw,\n     main = \"Functional Water Points\",\n     ribside=c(\"right\"))\nplot(kde_wpnonfunctional_bw,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"right\"))\n\n\n\n\n\nComputing using Adaptive Bandwidth selection method\n\nkde_wpfunctional_adaptive <- adaptive.density(wp_functional_ppp, method=\"kernel\")\n\nkde_wpnonfunctional_adaptive <- adaptive.density(wp_nonfunctional_ppp, method=\"kernel\")\n\npar(mfrow=c(1,2))\nplot(kde_wpfunctional_adaptive,\n     main = \"Functional Water Points\",\n     ribside=c(\"right\"))\nplot(kde_wpnonfunctional_adaptive,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"right\"))\n\n\n\n\nComparing Automated and Adapting Bandwidth Methods (side-by-side)\n\nFunctional Water PointNon-Functional Water Point\n\n\n\npar(mfrow=c(1,2))\nplot(kde_wpfunctional_bw,\n     main = \"Functional Water Points - Automated\",\n     ribside=c(\"right\"))\nplot(kde_wpfunctional_adaptive,\n     main = \"Functional Water Points - Adaptive\",\n     ribside=c(\"right\"))\n\n\n\n\n\n\n\npar(mfrow=c(1,2))\nplot(kde_wpnonfunctional_bw,\n     main = \"Non-Functional Water Points - Automated\",\n     ribside=c(\"right\"))\nplot(kde_wpnonfunctional_adaptive,\n     main = \"Non-Functional Water Points - Adaptive\",\n     ribside=c(\"right\"))\n\n\n\n\n\n\n\n\n\n6.1.2 Rescalling KDE Values\nAs we can the KDE values are small (ranging from 0 to 0.000035). This is because the default unit of measurement of svy21 is in meter. As a result, the density values computed is in “number of points per square meter”. So rescale() is used to covert the unit of measurement from meter to kilometer.\n\nwp_functional_ppp_km <- rescale(wp_functional_ppp, 1000, \"km\")\nwp_nonfunctional_ppp_km <- rescale(wp_nonfunctional_ppp, 1000, \"km\")\n\nNow we re-plot the graphs\n\nAutomated Bandwidth MethodAdaptive Bandwidth Method\n\n\n\nkde_wpfunctional_km <- density(wp_functional_ppp_km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \nkde_wpnonfunctional_km <- density(wp_nonfunctional_ppp_km,\n                              sigma=bw.ppl,\n                              edge=TRUE,\n                            kernel=\"gaussian\") \n\npar(mfrow=c(1,2))\nplot(kde_wpfunctional_bw,\n     main = \"Functional Water Points\",\n     ribside=c(\"right\"))\nplot(kde_wpnonfunctional_bw,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"right\"))\n\n\n\n\n\n\n\nkde_wpfunctional_adaptive_km <- adaptive.density(wp_functional_ppp_km, method=\"kernel\")\n\nkde_wpnonfunctional_adaptive_km <- adaptive.density(wp_nonfunctional_ppp_km, method=\"kernel\")\n\npar(mfrow=c(1,2))\nplot(kde_wpfunctional_adaptive,\n     main = \"Functional Water Points\",\n     ribside=c(\"right\"))\nplot(kde_wpnonfunctional_adaptive,\n     main = \"Non-Functional Water Points\",\n     ribside=c(\"right\"))\n\n\n\n\n\n\n\nFor this assignment, we will be using the Automated Bandwidth method because it defines its base in geographical space, where as the Adaptive method defines it in population (Reference). As we learned in Chapter 04, Automated Bandwidth is very sensitive to highly skew distribution of spatial point patterns over geographical units (e.g - urban versus rural). However, since we don’t have highly skewed data (as seen in the distribution graph in 4.3.2 Performing Point-In Polygon Count), we can use Fixed/Automated Bandwidth method."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-kde-output-into-grid-object",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#converting-kde-output-into-grid-object",
    "title": "Take-Home Excercise 01",
    "section": "6.2 Converting KDE output into grid object",
    "text": "6.2 Converting KDE output into grid object\n\ngridded_wpfunctional <- as.SpatialGridDataFrame.im(kde_wpfunctional_km)\ngridded_wpnonfunctional <- as.SpatialGridDataFrame.im(kde_wpnonfunctional_km)\n\nspplot(gridded_wpfunctional)\n\n\n\nspplot(gridded_wpnonfunctional)\n\n\n\n\n\n6.2.1 Converting Gridded Output into Raster\nNext, we convert the gridded kernal density objects into RasterLayer object by using raster() of raster package.\n\nkde_wpfunctional_raster <- raster(gridded_wpfunctional)\nkde_wpfunctional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -4.99773e-16, 10.55944  (min, max)\n\n\n\nkde_wpnonfunctional_raster <- raster(gridded_wpnonfunctional)\nkde_wpnonfunctional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : v \nvalues     : -2.52505e-16, 9.25861  (min, max)\n\n\n\n\n6.2.2 Assigning Projection Systems\n\nprojection(kde_wpfunctional_raster) <- CRS(\"+init=EPSG:26392 +datum:WGS84 +units=km\")\nkde_wpfunctional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +units=km +no_defs \nsource     : memory\nnames      : v \nvalues     : -4.99773e-16, 10.55944  (min, max)\n\n\n\nprojection(kde_wpnonfunctional_raster) <- CRS(\"+init=EPSG:26392 +datum:WGS84 +units=km\")\nkde_wpnonfunctional_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.8948485, 0.9616045  (x, y)\nextent     : 176.5032, 291.0438, 331.4347, 454.5201  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=4 +lon_0=8.5 +k=0.99975 +x_0=670553.98 +y_0=0 +a=6378249.145 +rf=293.465 +units=km +no_defs \nsource     : memory\nnames      : v \nvalues     : -2.52505e-16, 9.25861  (min, max)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#kernel-density-maps-on-openstreetmap",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#kernel-density-maps-on-openstreetmap",
    "title": "Take-Home Excercise 01",
    "section": "6.3 Kernel Density Maps on OpenStreetMap",
    "text": "6.3 Kernel Density Maps on OpenStreetMap\nNow, as the assignment requirements has specified, we should plot our kernel density maps on OpenStreetMap. Since we’ll be plotting a lot of kernel density maps, let’s create a function:\n\ndensity_map <- function(raster_object, map_title) {\n  tmap_mode(\"view\")\n  tm_basemap(\"OpenStreetMap\") +\ntm_shape(raster_object) +\n  tm_raster(\"v\", alpha=0.9) + \n  tm_layout(legend.position = c(\"right\", \"bottom\"), \n            legend.height = 0.5, \n            legend.width = 0.4,\n            main.title = map_title,\n            main.title.position = 'center',\n            main.title.size = 1,\n            frame = TRUE) + \n  tm_view(set.zoom.limits = c(8, 13))\n  } \n\n\nkde_wpfunctional_density_map <- density_map(kde_wpfunctional_raster, map_title = \"Functional Water Points in Osun State\")\nkde_wpnonfunctional_density_map <- density_map(kde_wpnonfunctional_raster, map_title = \"Non-Functional Water Points in Osun State\")\n\n\nFunctional Density MapNon-Functional Density Map\n\n\n\nkde_wpfunctional_density_map\n\n\n\n\n\n\n\n\nkde_wpnonfunctional_density_map\n\n\n\n\n\n\n\n\n\nFunctional Density MapNon-Functional Density Map\n\n\n\ntmap_mode('plot')\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(kde_wpfunctional_raster) +\n  tm_raster(\"v\")\n\n\n\n\n\n\n\ntmap_mode('plot')\ntm_basemap(\"OpenStreetMap\") +\ntm_shape(kde_wpnonfunctional_raster) +\n  tm_raster(\"v\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#kernel-density-maps-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#kernel-density-maps-analysis",
    "title": "Take-Home Excercise 01",
    "section": "6.4 Kernel Density Maps Analysis",
    "text": "6.4 Kernel Density Maps Analysis\nAs we can see in the map in 4.3 Data Wrangling for Water Data Point, the number of functional and non-functional water points are quite close, with there being 2319 Functional and 2008 Non-functional water points. As a result, both the density maps are similar. But what is interesting to note is that, there seems to be more concentrated density points for the Non-Functional water points, compared to the Functional water points. Further, from the density maps above, we can see that both the Functional and Non-Functional water points are relatively more concentrated in the center and the upper part of Osun and we don’t see that many water points in lower part of Osun. This patter is reflected in the map in [5.5 Combining point events object and owin object], where we see less concentration of points in the lower part of Osun."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#advantage-of-kernel-density-map-over-point-map",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#advantage-of-kernel-density-map-over-point-map",
    "title": "Take-Home Excercise 01",
    "section": "6.5 Advantage of Kernel Density Map over Point Map",
    "text": "6.5 Advantage of Kernel Density Map over Point Map\nTo understand the advantage of Kernel Density Map over Point Map, we first need to plot the two and compare the differences.\n\ntmap_mode(\"plot\")\ntm_shape(NGA_wp) +\n  tm_borders(alpha = 0.5) +\n  tmap_options(check.and.fix = TRUE) +\ntm_shape(wp_nonfunctional) +\n  tm_dots(col=\"red\", size=0.05) +\n  tm_layout(main.title = \"Non-Functional Water Points\",\n          main.title.position = \"center\",\n          main.title.size = 1.2,\n          frame = TRUE)\n\n\n\n\n\nkde_wpnonfunctional_density_map\n\n\n\n\nWith the Kernel Density Map, denser areas with a heavier distribution of Non-Functional Water Points are easily spotted. This is because the kernel density z-estimate helps to smooth out the points in a given area. Compared to the point map which just shows the points. Further, the gradient colour available (ranging from yellow to green) helps in understanding the density/concentration of water pumps in the area. It clearly shows the viewer which are the areas with more non-functional water pumps, however, with the point map, the users have to gauge/estimate which are the denser with more non-functional water points.\nFurther, another advantage of Kernel Density Maps is that it uses the Inverse Distance Weighed method which is estimating cell values by using a linearly weighted combination of a set of sample points (Reference). This is quite useful, because it takes into consideration of water points that are further away (from the residential area) and hence, people might have to travel further to access the water points. And this is accounted by the kernel function, and not the Point Map.\nHence to conclude, the Kernal Density provides a quantitative value representing the concentration of points, where as this can only be observed/gauged in Point Map."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#nearest-neighbour-analysis",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#nearest-neighbour-analysis",
    "title": "Take-Home Excercise 01",
    "section": "6.6?? Nearest Neighbour Analysis",
    "text": "6.6?? Nearest Neighbour Analysis\nThe 95% confident interval will be used.\nThe test hypotheses for Functional Water Point is :\nH0 : The distribution of Functional Water Point in Osun State is randomly distributed.\nH1 : The distribution of Functional Water Point in Osun State is not randomly distributed.\n\nclarkevans.test(wp_functional_ppp,\n                correction=\"none\",\n                clipregion=\"NGA_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  wp_functional_ppp\nR = 0.44265, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\nConclusion :\nThe test hypotheses for Non-Functional Water Point is :\nH0 : The distribution of Non-Functional Water Point in Osun State is randomly distributed.\nH1 : The distribution of Non-Functional Water Point in Osun State is not randomly distributed.\n\nclarkevans.test(wp_nonfunctional_ppp,\n                correction=\"none\",\n                clipregion=\"nga_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Monte Carlo test based on 99 simulations of CSR with fixed n\n\ndata:  wp_nonfunctional_ppp\nR = 0.43223, p-value = 0.01\nalternative hypothesis: clustered (R < 1)\n\n\nConclusion :"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-g-function",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-g-function",
    "title": "Take-Home Excercise 01",
    "section": "7.1 Analysing Spatial Point Process Using G-Function",
    "text": "7.1 Analysing Spatial Point Process Using G-Function\nWe will be using the G-Function for analyse the spatial point process. This function deals with the cumulative distribution of the nearest neighbor distances. It computes the nearest neighbor distance for each event, which is then sorted from smallest to largest. This is used to construct a cumilative distribution.\n\n7.1.1 Functional Water Point\nComputing G-function estimation\n\nG_wp_functional = Gest(wp_functional_ppp, correction = \"border\")\nplot(G_wp_functional, xlim=c(0,500))\n\n\n\n\nPerforming Complete Spatial Randomness Test\n\nG_wp_functional.csr <- envelope(wp_functional_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_wp_functional.csr)\n\n\n\n\nConclusion: The gray band shows for every distance, the smallest value and the largest value for of G(r) that is obtained out of 1000 simulations. The observed G(r) is far above the G(theo) as well as the envelope - indicating that Functional Water Points are clustered. Hence, we reject the null hypothesis that Functional Water Points are randomly distributed at 99% confident interval. Since the G(r) is above the randomization envelope, that is there are a lot of functional water points that intervent distances, as a result the curve climbs up very quickly. This suggests clustering.\n\n\n7.1.2 Non-Functional Water Point\nComputing G-function estimation\n\nG_wp_nonfunctional = Gest(wp_nonfunctional_ppp, correction = \"border\")\nplot(G_wp_nonfunctional, xlim=c(0,500))\n\n\n\n\nPerforming Complete Spatial Randomness Test\n\nG_wp_nonfunctional.csr <- envelope(wp_nonfunctional_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60........\n.70.........80.........90.........100.........110.........120.........130......\n...140.........150.........160.........170.........180.........190.........200....\n.....210.........220.........230.........240.........250.........260.........270..\n.......280.........290.........300.........310.........320.........330.........340\n.........350.........360.........370.........380.........390.........400........\n.410.........420.........430.........440.........450.........460.........470......\n...480.........490.........500.........510.........520.........530.........540....\n.....550.........560.........570.........580.........590.........600.........610..\n.......620.........630.........640.........650.........660.........670.........680\n.........690.........700.........710.........720.........730.........740........\n.750.........760.........770.........780.........790.........800.........810......\n...820.........830.........840.........850.........860.........870.........880....\n.....890.........900.........910.........920.........930.........940.........950..\n.......960.........970.........980.........990........ 999.\n\nDone.\n\n\n\nplot(G_wp_nonfunctional.csr)\n\n\n\n\nConclusion: The observed G(r) is far above the G(theo) as well as the envelope - indicating that Non-Functional Water Points are clustered. Hence, we reject the null hypothesis that Non Functional Water Points are randomly distributed at 99% confident interval."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-f-function",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-f-function",
    "title": "Take-Home Excercise 01",
    "section": "7.2 Analysing Spatial Point Process using F-Function",
    "text": "7.2 Analysing Spatial Point Process using F-Function\n\n7.2.1 Functional Water Points\nComputing F-function estimation\n\n#F_wp_functional = Fest(wp_functional_ppp)\n#plot(F_wp_functional)\n\nPerforming Complete Spatial Randomness Test\n\n#F_wp_functional.csr <- envelope(wp_functional_ppp, Fest, nsim = 999)\n\n\n#plot(F_wp_functional.csr)\n\n\n\n7.2.2 Non-Functional Water Points\nComputing F-function estimation\n\n#F_wp_nonfunctional = Fest(wp_nonfunctional_ppp, correction=\"best\")\n#plot(F_wp_functional)\n\nPerforming Complete Spatial Randomness Test\n\n#F_wp_nonfunctional.csr <- envelope(wp_nonfunctional_ppp, Fest, nsim = 999)\n\n\n#plot(F_wp_nonfunctional.csr)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-k-function",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-k-function",
    "title": "Take-Home Excercise 01",
    "section": "7.3 Analysing Spatial Point Process Using K-Function",
    "text": "7.3 Analysing Spatial Point Process Using K-Function\n\n7.3.1 Functional Water Point\nComputing K-function estimate\n\n#K_wp_functional = Kest(wp_functional_ppp, correction = \"Ripley\")\n#plot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\nPerforming Complete Spatial Randomness\n\n#K_wp_functional.csr <- envelope(wp_functional_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\n\n#plot(K_wp_functional.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n7.3.1 Non-Functional Water Point\nComputing K-function estimate\n\n#K_wp_nonfunctional = Kest(wp_nonfunctional_ppp, correction = \"Ripley\")\n#plot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\nPerforming Complete Spatial Randomness\n\n#K_wp_nonfunctional.csr <- envelope(wp_nonfunctional_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\n\n#plot(K_wp_nonfunctional.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-l-function",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#analysing-spatial-point-process-using-l-function",
    "title": "Take-Home Excercise 01",
    "section": "7.2 Analysing Spatial Point Process Using L-Function",
    "text": "7.2 Analysing Spatial Point Process Using L-Function\n\n7.2.1 Functional Water Point\n\n#|eval: false\n#L_wp = Lest(wp_functional_ppp, correction = \"Ripley\")\n#plot(L_wp, . -r ~ r, \n     #ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n#|eval: false\n#L_wp.csr <- envelope(wp_functional_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\n\n#|eval: false\n#plot(L_wp.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-and-transforming-geospatial-data",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#importing-and-transforming-geospatial-data",
    "title": "Take-Home Excercise 01",
    "section": "3.1 Importing and Transforming Geospatial Data",
    "text": "3.1 Importing and Transforming Geospatial Data\nWe will begin by importing Geospatial data into R by using the st_read() of sf package. It imports the nga_admbnda_adm2_osgof_20190417 shapefile into R as a polygon data frame. We provide 2 arguments - dsn (which is the data path) and layer (the shapefile name)\nWe use the st_transform() to perform projection transaction.\n\ngeoNGA <- st_read(\"data/geospatial\", \n                  layer = \"geoBoundaries-NGA-ADM2\")\n\nReading layer `geoBoundaries-NGA-ADM2' from data source \n  `C:\\mayurims\\IS415-GAA\\Take-Home_Ex\\Take-Home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\n\nNGA <- st_read(dsn = \"data/geospatial\", \n                  layer = \"nga_admbnda_adm2_osgof_20190417\")\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\mayurims\\IS415-GAA\\Take-Home_Ex\\Take-Home_Ex01\\data\\geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84\n\n\nWe can use the glimpse() of dplyr to know more about the associated attribute information of the dataframe.\n\nglimpse(geoNGA)\n\nRows: 774\nColumns: 7\n$ shapeName  <chr> \"Aba North\", \"Aba South\", \"Arochukwu\", \"Bende\", \"Ikwuano\", …\n$ pcode      <chr> \"NG001001\", \"NG001002\", \"NG001003\", \"NG001004\", \"NG001005\",…\n$ level      <chr> \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"AD…\n$ shapeID    <chr> \"NGA-ADM2-13203401B25860527\", \"NGA-ADM2-13203401B76240303\",…\n$ shapeGroup <chr> \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NGA\", \"NG…\n$ shapeType  <chr> \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"ADM2\", \"AD…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((7.387495 5...., MULTIPOLYGON (…\n\n\n\nglimpse(NGA)\n\nRows: 774\nColumns: 17\n$ Shape_Leng <dbl> 0.2370744, 0.2624772, 3.0753158, 2.5379842, 0.6871498, 1.06…\n$ Shape_Area <dbl> 0.0015239210, 0.0035311037, 0.3268678399, 0.0683785064, 0.0…\n$ ADM2_EN    <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ ADM2_PCODE <chr> \"NG001001\", \"NG001002\", \"NG008001\", \"NG015001\", \"NG003001\",…\n$ ADM2_REF   <chr> \"Aba North\", \"Aba South\", \"Abadam\", \"Abaji\", \"Abak\", \"Abaka…\n$ ADM2ALT1EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM2ALT2EN <chr> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…\n$ ADM1_EN    <chr> \"Abia\", \"Abia\", \"Borno\", \"Federal Capital Territory\", \"Akwa…\n$ ADM1_PCODE <chr> \"NG001\", \"NG001\", \"NG008\", \"NG015\", \"NG003\", \"NG011\", \"NG02…\n$ ADM0_EN    <chr> \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nigeria\", \"Nig…\n$ ADM0_PCODE <chr> \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\", \"NG\",…\n$ date       <date> 2016-11-29, 2016-11-29, 2016-11-29, 2016-11-29, 2016-11-29…\n$ validOn    <date> 2019-04-17, 2019-04-17, 2019-04-17, 2019-04-17, 2019-04-17…\n$ validTo    <date> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA…\n$ SD_EN      <chr> \"Abia South\", \"Abia South\", \"Borno North\", \"Federal Capital…\n$ SD_PCODE   <chr> \"NG00103\", \"NG00103\", \"NG00802\", \"NG01501\", \"NG00302\", \"NG0…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((7.401109 5...., MULTIPOLYGON (…\n\n\nFrom the attributed visible, we can see the HDE source (NGA) has a column called ‘ADM1_EN’ which can be used to filter for water points in Osun, Nigeria. However, this is not present in the geoBoundaries dataset. As a result, we will be using the Humanitarian Data Exchange source, where we get the files - nga_admbnda_adm2.\nNGA sf data.frame consists of many redundent fields. The code chunk below uses select() of dplyr to retain column 3, 4, 8 and 9.\n\nNGA <- NGA %>%\n  select(c(3:4, 8:9))\n\nWe then use the filter() to filter out the polygon features of Osun.\n\nNGA <- NGA %>% filter(ADM1_EN == \"Osun\")\n\nNow, we use the st_crs() to check the coordinate system of the data. As we can see, it uses the WGS 84 coordinate system. The data is using a Geographic projected system, however, this is system is not appropriate since we need to use distance and area measures.\n\nst_crs(NGA)\n\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n\n\nHence, we use st_transform() and not st_set_crs() as st_set_crs() assigns the EPSG code to the dataframe, however, now we need to transform the dataframe from geographic to projected coordinate system. We will be using crs=26392 (found from the EPSGfor Nigeria).\n\nNGA <- st_transform(NGA, crs = 26392)\n\nVerify that the CRS of NGA dataframe has changed.\n\nst_crs(NGA)\n\nCoordinate Reference System:\n  User input: EPSG:26392 \n  wkt:\nPROJCRS[\"Minna / Nigeria Mid Belt\",\n    BASEGEOGCRS[\"Minna\",\n        DATUM[\"Minna\",\n            ELLIPSOID[\"Clarke 1880 (RGS)\",6378249.145,293.465,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4263]],\n    CONVERSION[\"Nigeria Mid Belt\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",4,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",8.5,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",0.99975,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",670553.98,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",0,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Engineering survey, topographic mapping.\"],\n        AREA[\"Nigeria between 6°30'E and 10°30'E, onshore and offshore shelf.\"],\n        BBOX[3.57,6.5,13.53,10.51]],\n    ID[\"EPSG\",26392]]"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#colocation-of-functional-and-non-functional-water-points",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#colocation-of-functional-and-non-functional-water-points",
    "title": "Take-Home Excercise 01",
    "section": "6.6 Colocation of Functional and Non-Functional Water Points",
    "text": "6.6 Colocation of Functional and Non-Functional Water Points\nTo find the colocation of functional and non-functional water point, the ‘unknown’ water points are not required, and hence, we use the filter() to remove them.\n\nwp_sf_withoutUnknown <- wp_sf_nga %>%  filter(!status_clean=='unknown')\n\nIn the code chunk below, st_knn() of sfdep package is used to determine the k (i.e. 6) nearest neighbours for given point geometry. The function st_kernel_weights() is used to derive a weights list by using a kernel function. To compute LCLQ, the reference point data must be in either character or vector list. We create two vector lists - one of Functional and for Non-Functional water point and are called A and B respectively. The code local_colocation() os used to compute the LCLQ values for each water point. Before we can plot the LCLQ values their p-values, we need to join the output of local_colocation() to the stores sf data.frame.\n\n# This is required for Take Home Excercise 3\nnb <- include_self(\n  st_knn(st_geometry(wp_sf_withoutUnknown),6))\n\nwt <- st_kernel_weights(nb,\n                        wp_sf_withoutUnknown,\n                        \"gaussian\",\n                        adaptive = TRUE)\n\nA <- wp_functional$status_clean\n\nB <- wp_nonfunctional$status_clean\n\nLCLQ <- local_colocation(A, B, nb, wt, 49)\n\nLCLQ_stores <- cbind(wp_sf_withoutUnknown, LCLQ)\n\nThe below map plots the LCLQ analysis\n\ntmap_mode(\"view\")\ntm_shape(NGA) + \n  tm_polygons() + \n  tm_shape(LCLQ_stores)+\n    tm_dots(col = \"Non.Functional\",\n            size = 0.05,\n            border.col = \"grey\",\n            border.lwd = 0.5) + \n  tm_view(set.zoom.limits = c(8,11))\n\n\n\n\n\n\n\ntmap_mode(\"view\")\ntm_shape(NGA) + \n  tm_polygons() + \n  tm_shape(LCLQ_stores)+\n    tm_dots(col = \"Abandoned\",\n            size = 0.05,\n            border.col = \"grey\",\n            border.lwd = 0.5) + \n  tm_view(set.zoom.limits = c(9,13))\n\n\n\n\n\n\n\ntmap_mode(\"view\")\ntm_shape(NGA) + \n  tm_polygons() + \n  tm_shape(LCLQ_stores)+\n    tm_dots(col = \"Non.Functional.due.to.dry.season\",\n            size = 0.05,\n            border.col = \"grey\",\n            border.lwd = 0.5) + \n  tm_view(set.zoom.limits = c(9,11))\n\n\n\n\n\n\nThe above maps show the colocation of Functional Water Points and Non-Functional Water Points. This means that Non-functional water points in color (‘Non-Functional’, ‘Abandoned’, ‘Non-functional due to dry season’) are surrounded by several Functional water points and hence, are colocated. The above code evaluates each Non-Functional water point individually for colocation with the presence of Functional water points. Hence, if the number of Non-functional water points within the neighbourhood of Functional water points are higher than the global proportion of Non-Functional water points, the colocation point will be higher. As we can see from the above maps, there are many Non-functional water points colocated with Functional water points compared to that of ‘Abandoned’ or ‘Non-functional due to dry season’."
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#non-functional-l-test",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#non-functional-l-test",
    "title": "Take-Home Excercise 01",
    "section": "Non functional L test",
    "text": "Non functional L test\n\n#L_nonwp = Lest(wp_nonfunctional_ppp, correction = \"Ripley\")\n#plot(L_ck_wp, . -r ~ r, \n     #ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n#|eval: false\n#L_nonwp.csr <- envelope(wp_nonfunctional_ppp, Lest, nsim = 39, rank = 1, glocal=TRUE)\n\n\n#|eval: false\n#plot(L_nonwp.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#choropleth-mapping",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#choropleth-mapping",
    "title": "Take-Home Excercise 01",
    "section": "4.4 Choropleth Mapping",
    "text": "4.4 Choropleth Mapping\nWe will be calculating the proportion of Functional and Non-Functional water points and mapping them to see which area of Osun has more proportions of functional and non-functional water points.\n\nNGA_wp_total <- NGA_wp %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\ntm_shape(NGA_wp_total) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of functional water point by LGAs\",\n            legend.outside = TRUE)\n\n\n\n\n\n\n\ntm_shape(NGA_wp_total) +\n  tm_fill(\"pct_nonfunctional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\",\n          legend.hist = TRUE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Rate map of non-functional water point by LGAs\",\n            legend.outside = TRUE)"
  },
  {
    "objectID": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-pre-processing-1",
    "href": "Take-Home_Ex/Take-Home_Ex01/Take-Home_Ex01.html#data-pre-processing-1",
    "title": "Take-Home Excercise 01",
    "section": "8.1 Data Pre-Processing",
    "text": "8.1 Data Pre-Processing\nFor this, we will be using the wp_sf_nga dataframe which has all the water points. We will first convert sf data frames to sp’s Spatial class\n\nwp_spatial <- as_Spatial(wp_sf_nga)\n\nConvert spatial class into generic sp class\n\nwp_sp <- as(wp_spatial, \"SpatialPoints\")\n\nConverting generic sp format into spatstat’s ppp format\n\nwp_ppp <- as(wp_sp, \"ppp\")\nwp_ppp\n\nPlanar point pattern: 5557 points\nwindow: rectangle = [177285.9, 291287.05] x [340054.1, 450859.7] units\n\n\n\nplot(wp_ppp)\n\n\n\n\nFor this analysis, we will be working with marked data, and we know that the values are categorical (different water points), we need to ensure that the marked field is of factor data type. However, as seen from the output, our status_clean field is of chr data type, not factor! Hence, we will use the as.factor() function:\n\nwp_spatial@data$status_clean <-as.factor(wp_spatial@data$status_clean)\n\nWe then convert our spatial data datafram intto ppp format and create an owin object.\n\nwp_spatial_marked_ppp <- as(wp_spatial, \"ppp\")\n\n\nwp_spatial_marked_ppp = wp_spatial_marked_ppp[NGA_owin]\n\n\nplot(wp_spatial_marked_ppp, which.marks = \"status_clean\")\n\n\n\n\nWe use the density() to compute the kernel density objects, and the use plot() to plot it out. Further, we convert the meter to kilometers using rescale()\n\nplot((density(split(rescale(wp_spatial_marked_ppp, 1000)))))\n\n\n\n\nBefore we proceed with our second order spatial analysis, we need to assign marks to the ppp objects + check the levels of the marks:\n\nlevels(marks(wp_spatial_marked_ppp))\n\n[1] \"Abandoned\"                        \"Abandoned/Decommissioned\"        \n[3] \"Functional\"                       \"Functional but needs repair\"     \n[5] \"Functional but not in use\"        \"Non-Functional\"                  \n[7] \"Non-Functional due to dry season\" \"unknown\"                         \n\n\nAs we can see from the marks, and the above density maps, there are 7 levels here. However, we need them to be only classified into 3 - Functional, Non-Functional and unknown. Hence, we will be using the below code to rename the variable.\n\nlevels(marks(wp_spatial_marked_ppp))[levels(marks(wp_spatial_marked_ppp)) == \"Abandoned\"] <- \"Non-Functional\"\n\n\nlevels(marks(wp_spatial_marked_ppp))[levels(marks(wp_spatial_marked_ppp)) == \"Abandoned/Decommissioned\"] <- \"Non-Functional\"\n\n\nlevels(marks(wp_spatial_marked_ppp))[levels(marks(wp_spatial_marked_ppp)) == \"Non-Functional due to dry season\"] <- \"Non-Functional\"\n\n\nlevels(marks(wp_spatial_marked_ppp))[levels(marks(wp_spatial_marked_ppp)) == \"Functional but needs repair\"] <- \"Functional\"\n\n\nlevels(marks(wp_spatial_marked_ppp))[levels(marks(wp_spatial_marked_ppp)) == \"Functional but not in use\"] <- \"Functional\"\n\nNow, upon running the below code, we can see that all the levels are categorisied into our 3 desired levels.\n\nlevels(wp_spatial_marked_ppp[[\"marks\"]])\n\n[1] \"Non-Functional\" \"Functional\"     \"unknown\"       \n\n\n\nplot(wp_spatial_marked_ppp, which.marks = \"status_clean\")\n\n\n\n\n\nplot(density(split(wp_spatial_marked_ppp)))\n\n\n\n\nFrom the above density maps, we can observe a relationship between Functional and Non-Functional water points - in the sense that the there seems to be a lot of water Functional water points where ever there are Non-Functional water points. They seem to coexist together quite a lot of times, and hence indicating some level of dependence between them. Hence, to investigate this, we will be using the Cross K-Function.\n\nH0: The distribution of Functional and Non-Functional water points are spatially independent\nH1: The distribution of Functional and Non-Functional water points are not spatially independent\nConfidence Level: 99%\nSignificance Level: 0.01%\n\nThe null-hypothesis will be rejected if the p-value is smaller than alpha value of 0.01.\n\nwp_spatial_marked_ppp_Lcross.csr <- envelope(wp_spatial_marked_ppp, \n                                 Lcross, \n                                 i=\"Functional\", \n                                 j=\"Non-Functional\", \n                                 correction=\"border\", \n                                 nsim=999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10 [etd 3:43] .........20 [etd 3:58] .........\n30 [etd 3:52] .........40 [etd 3:58] .........50 [etd 3:58] ........\n.60 [etd 3:58] .........70 [etd 3:57] .........80 [etd 3:52] .......\n..90 [etd 3:49] .........100 [etd 3:44] .........110 [etd 3:42] ......\n...120 [etd 3:37] .........130 [etd 3:38] .........140 [etd 3:36] .....\n....150 [etd 3:34] .........160 [etd 3:31] .........170 [etd 3:28] ....\n.....180 [etd 3:26] .........190 [etd 3:22] .........200 [etd 3:20] ...\n......210 [etd 3:16] .........220 [etd 3:14] .........230 [etd 3:10] ..\n.......240 [etd 3:08] .........250 [etd 3:06] .........260 [etd 3:04] .\n........270 [etd 3:03] .........280 [etd 2:59] .........290\n [etd 2:56] .........300 [etd 2:53] .........310 [etd 2:50] .........\n320 [etd 2:47] .........330 [etd 2:45] .........340 [etd 2:42] ........\n.350 [etd 2:40] .........360 [etd 2:37] .........370 [etd 2:34] .......\n..380 [etd 2:32] .........390 [etd 2:29] .........400 [etd 2:27] ......\n...410 [etd 2:25] .........420 [etd 2:22] .........430 [etd 2:20] .....\n....440 [etd 2:17] .........450 [etd 2:15] .........460 [etd 2:12] ....\n.....470 [etd 2:10] .........480 [etd 2:07] .........490 [etd 2:05] ...\n......500 [etd 2:02] .........510 [etd 2:00] .........520 [etd 1:58] ..\n.......530 [etd 1:56] .........540 [etd 1:53] .........550 [etd 1:51] .\n........560 [etd 1:48] .........570 [etd 1:46] .........580\n [etd 1:43] .........590 [etd 1:40] .........600 [etd 1:38] .........\n610 [etd 1:36] .........620 [etd 1:33] .........630 [etd 1:31] ........\n.640 [etd 1:28] .........650 [etd 1:26] .........660 [etd 1:23] .......\n..670 [etd 1:21] .........680 [etd 1:18] .........690 [etd 1:16] ......\n...700 [etd 1:13] .........710 [etd 1:11] .........720 [etd 1:08] .....\n....730 [etd 1:06] .........740 [etd 1:03] .........750 [etd 1:01] ....\n.....760 [etd 58 sec] .........770 [etd 56 sec] .........780 [etd 54 sec] ...\n......790 [etd 51 sec] .........800 [etd 49 sec] .........810 [etd 46 sec] ..\n.......820 [etd 44 sec] .........830 [etd 41 sec] .........840 [etd 39 sec] .\n........850 [etd 37 sec] .........860 [etd 34 sec] .........870\n [etd 32 sec] .........880 [etd 29 sec] .........890 [etd 27 sec] .........\n900 [etd 24 sec] .........910 [etd 22 sec] .........920 [etd 19 sec] ........\n.930 [etd 17 sec] .........940 [etd 14 sec] .........950 [etd 12 sec] .......\n..960 [etd 10 sec] .........970 [etd 7 sec] .........980 [etd 5 sec] ......\n...990 [etd 2 sec] ........ 999.\n\nDone.\n\n\n\nplot(wp_spatial_marked_ppp_Lcross.csr, xlab=\"distance(m)\", xlim=c(0,500))\n\n\n\n\nConclusion : The Functional and Non-Functional water point are not statistically independent as the empirical k-cross line is outside of the envelope of 99% confidence level, and for that we reject the null hypothesis."
  }
]