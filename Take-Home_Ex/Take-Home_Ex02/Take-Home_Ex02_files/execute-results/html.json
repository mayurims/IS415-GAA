{
  "hash": "f581630915300b2047e20c2823655fea",
  "result": {
    "markdown": "---\ntitle: \"Take-Home Excercise 02\"\nauthor: \"Mayuri Salunke\"\ndate: \"30 January 2023\"\ndate-modified: \"2023-03-06\"\nexecute: \n  echo: false\n  eval: false\n  message: false\n  warning: false\neditor: visual\n---\n\n\n# 1.0 Overview\n\nAs of the latest available data, Jakarta, the capital city of Indonesia, has been one of the hardest-hit regions in the country in terms of COVID-19 cases. The first confirmed case in Jakarta was reported on March 2, 2020, and since then, the number of cases has steadily increased.\n\nAs of February 24, 2023, the total number of confirmed cases in Jakarta has reached over 1.4 million, which is around 12% of the total cases in Indonesia. The number of active cases has decreased over the past few months, but there are still several thousand active cases in Jakarta.\n\nThe Jakarta government has implemented various measures to curb the spread of the virus, including social distancing rules, mandatory mask-wearing in public, and limiting public gatherings. The government has also conducted mass testing and contact tracing efforts to isolate those who have been infected.\n\nOverall, the situation in Jakarta remains concerning, but the government's efforts to control the spread of the virus have helped to mitigate the impact of the pandemic on the city.\n\n[![Jakarta records 584 new confirmed COVID-19 cases This article was published in thejakartapost.com with the title \"Jakarta records 584 new confirmed COVID-19 cases\".](images/image-565006615.png)](https://www.thejakartapost.com/news/2020/07/29/jakarta-records-584-new-confirmed-covid-19-cases.html)\n\n# 2.0 Setup\n\n## 2.1 Packages Used\n\n-   sf : Used for importing geospatial data, assigning or transforming coordinate systems, and converting geospatial and aspatial data into a sf data frame\n\n-   tidyverse : Used for transforming and better presentation of Data\n\n-   tmap : Used for plotting static point patterns maps or interactive map\n\n    kableExtra : Used for table customization\n\n-   sfdep : Used for functions creates not present in spdep.\n\n-   readxl : Used for reading Microsoft Excel files\n\n-   plyr : Used for splitting, applying and combining data in a \"split-apply-combine\" framework\n\n-   Kendall : Used for computnig Kendall tau and is used for Mann Kendall Test\n\n-   plotly : Used for creating interactive web-based visualisations\n\n\n::: {.cell}\n\n:::\n\n\n## 2.2 Datasets Used\n\n\n::: {.cell}\n\n:::\n\n\nThings to Note for Aspatial Data:\n\nTo retrieve the monthly cumulative records for the COVID-19 cases in Jakarta, I took the data compiled on the last of every month (e.g - 31st July, 30tt August ... ) from July 2021 to June 2022. I had started with taking the first of every month, however, i realized that the data for 1st March 2022 is actually of 2nd March 2022. And to have consistency in the data, I decided to use the last day of every month instead.\n\nFurther, the data consists of the following groups -\n\n-   Vaccination of Elderly (Lansia)\n\n-   Vaccination of Public Servant (Pelayan Publik)\n\n-   Mutual Cooperation (Goton Royong) Vaccination\n\n-   Vaccination of Health Workers (Tenaga Kesehatan)\n\n-   Stage 3 (Tahapan) Vaccinations\n\n-   Vaccination of Teenagers (Remaja)\n\n# 3.0 Data Wrangling : Geospatial Data\n\n## 3.1 Importing Geospatial Data\n\nWe will begin by importing Geospatial data into R by using the st_read() of sf package. It imports the BATAS_DESA_DESEMBER_2019_DUKCAPIL_DKI_JAKARTA shapefile into R as a polygon data frame. We provide 2 arguments - dsn (which is the data path) and layer (the shapefile name)\n\n\n::: {.cell}\n\n:::\n\n\nFrom the output message, we learn that:\n\n-   Geometry type is multipolygon\n\n-   269 features, 161 fields\n\n-   Assigned CRS is [WGS 84](https://epsg.io/4326), the 'World Geodetic System 1984'. This is not right, and will be rectified in [3.2.3 Verifying + Transforming Coordinates](#verifying-transforming-coordinates)\n\n## 3.2 Data Pre-processing {data-link=\"3.2 Data Pre-processing\"}\n\n### 3.2.1 Dropping Invalid Dimensions\n\nSince, we only have one dataframe, there are no invalid dimensions, and hence, this step is not required.\n\n### 3.2.2 Missing Values\n\nNow lets check if there are any missing values.\n\n\n::: {.cell}\n\n:::\n\n\nWe can see that there are 2 rows containing 'NA' values. However, since the data is big, we need to find the columns with missing NA values so that we can work on it.\n\n\n::: {.cell}\n\n:::\n\n\nWe can see that there are two particular rows with missing values for KAB_KOTA (City), KECAMATAN (District) and DESA_KELUR (Village).\n\nHence, we remove rows with NA value in DESA_KELUR. There are other columns with NA present as well, however, since we are only looking at the sub-district level, it is most appropriate to remove DESA_KELUR\n\n\n::: {.cell}\n\n:::\n\n\nLets double check if the rows with missing values are removed.\n\n\n::: {.cell}\n\n:::\n\n\n### 3.2.3 Verifying + Transforming Coordinates {#verifying-transforming-coordinates}\n\nNow, we use the `st_crs()` to check the coordinate system of the data. As we can see, it uses the WGS 84 coordinate system. The data is using a Geographic projected system, however, this is system is not appropriate since we need to use distance and area measures.\n\n\n::: {.cell}\n\n:::\n\n\nHence, we use `st_transform()` and not `st_set_crs()` as `st_set_crs()` assigns the EPSG code to the data frame. And we need to transform the data frame from geographic to projected coordinate system. We will be using crs=23845 (found from the [EPSG](https://epsg.io/?q=DGN95&page=3) for Indonesia).\n\n\n::: {.cell}\n\n:::\n\n\nLets double check if CRS has been assigned\n\n\n::: {.cell}\n\n:::\n\n\n### 3.2.3 Removal of Outer Islands\n\nNow that we have done our basic pre-processing, lets quickly visualize the data\n\n\n::: {.cell}\n\n:::\n\n\nAs we can see from the diagram, `jakarta` includes both mainland and outer islands. And since we don't require the outer islands (as per the requirements), we can remove them.\n\n**DIAGRAMM EXPLAINING THE DATAA**\n\nWe know that the date is grouped by KAB_KOTA (City), KECAMATAN (Sub-District) and DESA_KELUR (Village). Now, lets plot the map and see how we can use KAB_KOTA to remove the outer islands.\n\n\n::: {.cell}\n\n:::\n\n\nFrom the map, we can see that all the cities in Jakarta start with 'Jakarta' as their prefix and hence, 'Kepulauan Seribu' are the other outer islands. When translated in English, the name means 'Thousand Islands'. Now we know what to remove, and we shall proceed with that.\n\n\n::: {.cell}\n\n:::\n\n\nNow, lets double check if the outer islands have been removed.\n\n\n::: {.cell}\n\n:::\n\n\n### 3.2.4 Retaining first 9 fields of `jakarta`\n\nAdditionally, the assignment only requires us to retain the relevant fields - which are the first 9 fields.\n\n\n::: {.cell}\n\n:::\n\n\n### 3.2.5 Renaming Columns with Translation\n\nSince the columns names are in Indonesian, lets rename them to English for better ease of use.\n\n\n::: {.cell}\n\n:::\n\n\n# 4.0 Data Wrangling : Aspatial Data\n\n## 4.1 Pre-Importing EDA\n\nFor this assignment, we will be working on data from July 2021 to June 2022, as a result we will be having several excel files. Thus, it is safer to preview the data first and check for any discrepancies, before compiling all the data.\n\n\n::: {.cell}\n\n:::\n\n\nThe above output shows that there are no duplicates. So we will check for all of them just to ensure that there are no duplicates and no inconsistencies\n\n::: panel-tabset\n**August 2021**\n\n\n::: {.cell}\n\n:::\n\n\n**September 2021**\n\n\n::: {.cell}\n\n:::\n\n\n**October 2021**\n\n\n::: {.cell}\n\n:::\n\n\n**November 2021**\n\n\n::: {.cell}\n\n:::\n\n\n**December 2021**\n\n\n::: {.cell}\n\n:::\n\n\n**January 2021**\n\n\n::: {.cell}\n\n:::\n\n:::\n\n::: panel-tabset\n**February 2022**\n\n\n::: {.cell}\n\n:::\n\n\n**March 2022**\n\n\n::: {.cell}\n\n:::\n\n\n**April 2022**\n\n\n::: {.cell}\n\n:::\n\n\n**May 2022**\n\n\n::: {.cell}\n\n:::\n\n\n**June 2022**\n\n\n::: {.cell}\n\n:::\n\n:::\n\nAs we can see, till February 2022, the number of columns is 27. However, from March 2022 the number of columns is 34. Upon researching about the difference between the number of columns, i realized that the data files from March 2022 has a separate column for Dosage 3, where has all the data files before March 2022 don't have any dosage 3 column. This could attribute to the the fact that, dosage 3 vaccination was only provided from March 2022.\n\nHence, we will address this issue in the next section.\n\n## 4.2 Creating an Aspatial Data Pre-Processing Function\n\nFor the assignment, we don't require all the columns. Only the following columns are required -\n\n-   KODE KELURAHAN (Sub-District Code)\n\n-   KELURAHAN (Sub-District)\n\n-   SASARAN (Target)\n\n-   BELUM VASKIN (Yet to be vaccinated / Not yet vaccinated)\n\nThis solves the issue of some months having extra columns. However, we need to create an 'Date' column that shows the month and year of the observation, which is originally the file name. Each file has the naming convention 'Data Vaksinasi Berbasis Keluarahan (DD Month YYYY).\n\nWe will be combining the mentioned steps into a function\n\n\n::: {.cell}\n\n:::\n\n\n## 4.3 Feeding files into the aspatial_preprocess function\n\nInstead of manually feeding the files, line by line, we will be using the function list.files() and lapply() to get our process done faster!\n\n\n::: {.cell}\n\n:::\n\n\nWe will then convert the dflist into an actual dataframe with ldply() using the below code\n\n\n::: {.cell}\n\n:::\n\n\nNow, lets take a look into our data\n\n\n::: {.cell}\n\n:::\n\n\n## 4.4 Formatting Date Column\n\nThe Dates are in Bahasa Indonesia, and hence, we need to translate them to English for ease of use. However, since the values in Date column were derived from sub-strings, they are in a string format and thus, first need to be converted to datetime.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## 4.5 Renaming the Column names into English\n\nWe can now rename the column names into English for ease of use\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nAs we can see, the columns have successfully been renamed in English.\n\n## 4.5 Further Data Processing\n\nNow that we have our Aspatial data into our desired dataframe, lets perform any pre-processing to check out for anything we might have missed.\n\n\n::: {.cell}\n\n:::\n\n\nFrom the output, we can see there are no missing values.\n\n# 5.0 Geospatial Data Integration\n\n## 5.1 Preliminary joining + EDA\n\nNow that we have both our Geospatial and Aspatial data, we need to join them. However, we need to first find a common header to join them.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nWe can see that both the dataframes have Sub_District and hence we can join them by the Sub_District and Sub_District_Code (same as Village_Code in 'jakarta').\n\n\n::: {.cell}\n\n:::\n\n\nNow, lets take a look into the columns of combined_jakarta\n\n\n::: {.cell}\n\n:::\n\n\nWe can then subcategorize the data into 'Target population to be Vaccinated' , 'Not Yet Vaccinated Population' and 'Total Population'\n\n\n::: {.cell}\n\n:::\n\n\nWhat is interesting to note, is that there seems to be a 'Missing' value in the Target and Not_Yet_Vaccinated maps. Even though, when we had previously checked for missing values, it didn't show any missing values. However, we shall double check again.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nAs seen, we don't have any mission values in our dataframes. Hence, the most likely reasons for the missing values must be due to mismatched values when we combined (left-join) the Geospatial and Aspatial data.\n\n## 5.2 Identifying Mismatched Sub-District Records\n\nSince, we had conducted left-join using the Sub-District, there must be a mismatch in the naming of the subdistricts. Lets check it by looking at the unique subdistrict names in both `jakarta` and `vaccination_jakarta`\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nWe can see that there are same names in both the list but are just written in different ways. However, there are 6 words in the `vaccination_subdistrict` which are not in the `jakarta_subdistrict`. We shall take a look into that after we first correct the mismatched values.\n\nNow, lets view the differences --\n\n\n::: {.cell}\n\n:::\n\n\nAs we can see these records have the same name, except that there is not standardization on how it is to be written. As a result, there is a mismatch between them. So now, lets correct this mismatch\n\n\n::: {.cell}\n\n:::\n\n\nNow, lets look into the 6 subdistrict names that we say in `vaccination_jakarta` which were not present in `jakarta`. This ideally suggests that these districts are not a part of Jakarta, however, we need to double check it just to be sure.\n\n![Unique Subdistricts](images/image-2131298069.png)\n\n![Subdistricts in Jakarta](images/image-779347305.png)\n\nThis can be verified by taking a look at our excel file. The 2nd screenshot shows the subdistricts in Jakarta as they have the name Jakarta in 'WILAYAH KOTA' which means City Area. However, as seen in the 1st screenshot, these 6 subdistricts do not have the name Jakarta in 'WILAYAH KOTA' confirming the fact that they are not a part of Jakarta. Hence, we need to remove them.\n\n\n::: {.cell}\n\n:::\n\n\n## 5.3 Rejoining + EDA\n\nNow, that we have a more standardized common identifier and have removed all the unnecessary values from our data, we can join them again once more!\n\n\n::: {.cell}\n\n:::\n\n\nLet's check if there are any NA values now\n\n\n::: {.cell}\n\n:::\n\n\nLet's re-visualize the data into 'Target population to be Vaccinated' , 'Not Yet Vaccinated Population' and 'Total Population'\n\n\n::: {.cell}\n\n:::\n\n\n# \n\n# 6.0 Calculations for Vaccination Rate\n\nBefore we proceed with EDA and Thematic mapping, we need to compute the monthly vaccination rate (in %) at the sub-district level\n\n$$\nVaccination Rate = ((Target - Numberofpeople not vaccinated) / Target) * 100\n$$\n\nNote : We use 'Target' (SASARAN) instead of Population, as the Indonesian government excludes people aged 14 and below for vaccination. As a result, they will be excluded from the total population.\n\n\n::: {.cell}\n\n:::\n\n\nNow, lets look at how computed vaccination_rate looks like\n\n\n::: {.cell}\n\n:::\n\n\n## 6.1 Converting dataframs to sf objects\n\nBefore we move on into the mapping, we need to convert the dataframes into sf objects. We will convert combined_jakarta and vaccination_rate which will be using for our analysis.\n\n\n::: {.cell}\n\n:::\n\n\n# 7.0 Choropleth Mapping and Anlaysis\n\nThere are multiple ways to classify data in Choropleth maps, here are the some of them -\n\n1.  Equal Interval - This method divides the range of data into equal-sized intervals. However, this can be misleading as it does not take into account the distribution of values\n2.  Quantile - This method divides the data into equal-sized groups, each containing an equal number of data points. However, they are quite sensitive to outliers\n3.  Jenks - This method uses statistical algorithm to group data into classes based on natural break/gaps in the distribution of values (even with low variance).\n\nFor this assignment, I am choosing the Jenks classification method as it seeks to minimize the variance within each group while maximizing the variance between groups. As a result it accurately reflects the distribution of values in the data.\n\n## 7.1.1 Jenks Choropleth Maps\n\nAfter testing, I have decided to stick to 6 classes, as too many classes makes it hard for the human eye to differentiate between the gradients, while too few makes it hard for any differentiation to be seen. Hence, 6 classes is the optimum number of classes.\n\n\n::: {.cell}\n\n:::\n\n\nWe have to plot it for all the months, hence, let's have a function to help us do it!\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nPlotting all 12 maps together\n\n\n::: {.cell}\n\n:::\n\n\n## 7.1.2 Observations from Jenks Choropleth maps\n\nWe can notice the following things for sub-districts regarding high vaccination rate (sub-district in darker colour) :\n\n-   The highest vaccination rate from the periods of 31/07/2021 to 31/08/2021 seems to be more concentrated towards the North of Jakarta.\n\n-   From the period of 30/09/2021 to 30/11/2021, the high vaccination rates are more spread out throughout Jakarta\n\n-   The high vaccination rates seem to be more concentrated towards the South and East of Jakarta from the period of 31/12/2021.\n\nWe can notice the following things for sub-districts regarding low vaccination rate (sub-district in lighter colour) :\n\n-   The map of 31/08/2021 shows more sub-districts with a lighter colour (indicating) low vaccination rate\n\n-   However, it looks like most of the sub-district caught up the following month (30/09/2021) with a more uniform colour (i.e. fewer sub-districts with light colours)\n\n-   From the period 31/01/2022, there were more sub-districts with lower vaccination rate (lighter colour). Especially sub-districts in the North and West (except for a few sub-districts in the North with a relatively higher vaccination rate). Further, some of the sub-districts in the Central seem to have the lowest vaccination rate consistently from as seen from the maps from 27/02/2022 onward.\n\n## **7.2.1 Spatio-Temporal Mapping With Custom Breakpoints**\n\nIn the above section, we see that each month has its own vaccination rate range, but in order to see the spatio-temporal progression of vaccination rates, we need to set a fixed range. Hence, we need to customise our breakpoints into 6 breakpoints (just like we did above into 6 classes)\n\nFor that, we need to find the highest and lowest vaccination rate. The highest vaccination rate will come from the latest month - June 2022. Whereas, the lowest vaccination rate will come from the first month - July 2021.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nOur range for the breakpoints is 37 to 90. After experimenting with the breakpoints, I have chosen the following breakpoints as they provide a proper categorization such that we can differentiate sub-districts with lower vaccination rate from those with higher vaccination rate (i.e. not making majority of sub-districts) in the same colour.\n\n\n::: {.cell}\n\n:::\n\n\nNow lets create a function to help us plot for 12 months\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## **7.2.2 Observations from Spatio-Temporal Map**\n\n![Vaccination Rate gif created using https://imgflip.com/gif-maker](images/7ce334-02.gif){fig-align=\"center\"}\n\nNow, we can supplement our our observations made in [6.1.2 Observations from Jenks Choropleth maps](https://is415-mayurims.netlify.app/take-home_ex/take-home_ex02/take-home_ex02#observations-from-jenks-choropleth-maps). Here are the observations -\n\n-   In July 2021, we can see a slightly higher vaccination rate in the North and Central districts\n\n-   In the month August and September 2021, there seems to be a more uniform distribution of vaccination rate (almost same colour range throughout Jakarta)\n\n-   However, from December 2021, some sub-districts have a consistent/increasing high vaccination rate. This seems to be most evident in the sub-districts in the South and East district (with most of them having high Vaccination Rate). But we can also see an increasing vaccination rate in many sub-districts in the North and Central Jakarta.\n\n# **8.0 Local Gi\\* Anlaysis**\n\nI will be conducting a Local Gi\\* Analysis, also known as Local Spatial Autocorrelation which will be used to identify ideas sub-districts in Jakarta with high or low vaccination rate. Time-series analysis will be conducted to understand the evolution of spatial hot spots and cold spots across time.\n\n**Interpretation of Gi\\* values**\n\n-   Gi∗\\>0 : indicates sub-districts with higher vaccination rate than average\n\n-   Gi∗\\<0 : indicates sub-districts with higher vaccination rate than average\n\nFor significant (p_value\\<0.05) Gi\\* statistic values, two spatial associations can be inferred :\n\n-   **Hot spot areas**: where Gi∗\\>0, indicating that a location is associated with relatively high values in the surrounding locations.\n\n-   **Cold spot areas**: where Gi∗\\<0, indicating that a location is associated with relatively low values in the surrounding locations.\n\n## **8.1 Computing Local Gi\\* Values of Monthly Vaccination Rate**\n\n**8.1.1 Create an Attribute Table**\n\nBefore we create a time series cube, we need to first have an attribute table with the relevant data - Date, Sub_District and Vaccination Rate.\n\n\n::: {.cell}\n\n:::\n\n\nNow, lets look into the attribute table we created and make sure everything is correct\n\n\n::: {.cell}\n\n:::\n\n\n### **8.1.2 Create a Spatio-Temporal Cube**\n\nNow we use `spacetime()` to create an spatio-temporal cube\n\n\n::: {.cell}\n\n:::\n\n\nNext we need to verify if `vacc_rate_st` is indeed a space-time cube by using the `is_spacetime_cube()` of sfdep package\n\n\n::: {.cell}\n\n:::\n\n\nThe **TRUE** return confirms that `vacc_rate_st` object is indeed an time-space cube.\n\n### **8.1.3 Derive Spatial Weights**\n\nNext, we will compute the local Gi\\* weights, but before that we need derive the spatial weights. The below code chunk is used to identify neighbors and derive an inverse distance weights.\n\n\n::: {.cell}\n\n:::\n\n\nNote -\n\n-   `activate()` is used to activate the geometry context\n\n-   `mutate()` is used to create two new columns *nb* and *wt*.\n\n-   Then we will activate the data context again and copy over the nb and wt columns to each time-slice using `set_nbs()` and `set_wts()`\n\n    -   row order is very important so do not rearrange the observations after using `set_nbs()` or `set_wts()`.\n\nAs a result, this dataset has neighbors and weights for each time-slice\n\n\n::: {.cell}\n\n:::\n\n\nWe will use `set.seed()` before performing simulation to ensure that the computation is reproducible. When a random number generator is used, the results can be different each time the code is run, which makes it difficult to reproduce results. By setting the seed to a specific value (e.g., **`set.seed(1234)`**), the same random numbers will be generated each time the code is run, making the results reproducible and consistent.\n\n\n::: {.cell}\n\n:::\n\n\n### **8.1.4 Computing Gi\\* Value**\n\nWe will now compute the Gi\\* value for each sub-district, grouping by Date\n\n\n::: {.cell}\n\n:::\n\n\nLet's take a look at the Gi\\* values calculated\n\n\n::: {.cell}\n\n:::\n\n\n## **8.2 Visualizing the Gi\\* values of Monthly Vaccination Rate**\n\nIn order for us to be able to visualize the Gi\\* values of the monthly vaccination rate, we need to join it with `combined_jakarta`, to be able to plot the Gi\\* values on the map. As the `gi_values` do not have any coordinates.\n\n\n::: {.cell}\n\n:::\n\n\nWe can see that, it has joined them by 'Sub_District' and 'Date'. Now, lets look into what our `jakarta_gi_values` look like\n\n\n::: {.cell}\n\n:::\n\n\nNow, we can start with the visualization process. Let's proceed with visualizing the first month (July 2021). We will be plotting both the Gi\\* value and the p-value of Gi\\* for the Vaccination Rates.\n\nNote - As per requirement, we will only be plotting the significant (i.e. p-value \\< 0.05)\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\n## **8.3 Analyzing the Results**\n\nThe p-value represents the probability of observing a clustering. Sub-districts with significant p-value (i.e., p_value\\<0.05) suggests that the observed pattern is unlikely to have occurred by chance and may indicate the presence of a spatial process. Hence, the vaccination rate of the sub-district at that period is significant. From the maps plotted, we see that there is in increase in number of sub-districts (with p_values\\<0.05) in the southern and eastern sub-district.\n\nNow, lets find the hot and cold spots. The above code filters our sub-districts with p-value\\<0.05. Hence, we can find which sub-districts are hot or cold spots, depending on their g-value.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nSub-districts with gi_star \\> 0 are hot spot areas, where those \\< 0 are cold spot areas. Hot spot areas are areas with clustering of high concentration of vaccination rate. Where as cold spot areas are sub-districts with low concentration. In the above maps, sub-districts in the shade of green are hot spot areas and those in the shades of red are cold-spot areas.\n\nIn the beginning, there were more hot-spot areas in the North Jakarta, however, we see a change where most of the hotspots are now concentrated in the South Jakarta. This could be due to higher percentage of ageing population in South Jakarta or an increase in availability and accessibility of vaccine sites in South Jakarta. For the cold spots, some sub-districts in the Center seem to be a cold-spot. This suggests that there is a continuous shortage of vaccine or that the residents are unwilling to take the vaccine.\n\n# 9.0 Emerging Hot Spot Anlaysis (EHSA)\n\nEmerging Hot Spot Analysis (EHSA) is a spatio-temporal analysis method for revealing and describing how hot spot and cold spot areas evolve over time. Since, we have already built a space-time cube and calculate the Gi\\* statistict, we can directly conduct the Mann-Kendall trend test to evaluate 3 sub-districts for a trend. The Mann-Kendall test is a non-parametric statistical method used to analyze trends in time series data. For this analysis, I will be choosing HALIM PERDANA KUSUMAH, KOTA BAMBU SELATAN and KAMAL.\n\nHere are the hypothesis for Mann-Kendall Test --\n\n-   H~0~: There is no trend in the data, meaning that the data points are independent and identically distributed\n\n-   H~1~: There is a trend (positive or negative)\n\nWe will be observing 2 values -\n\n-   tau - It is a measure of strength and direction a monotonic trend between two variables. It ranges from +1 to -1, where a value of 1 indicates a perfect increasing monotonic trend, a value of -1 indicates a perfect decreasing monotonic trend, and a value of 0 indicates no monotonic trend.\n\n-   sl - This stands for significance level\n\n## 9.1 Mann-Kendall Trend Test\n\n### 9.1.1 Sub-District -- Halim Perdana Kusumah\n\n\n::: {.cell}\n\n:::\n\n\nNow, we plot the result by using ggplot2 functions.\n\n\n::: {.cell}\n\n:::\n\n\nWe can also plot this interactively\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nThe p-value is 0.086 which is \\> 0.05 hence p-value is not significant. This result tells us that there is no trend and the data points are independent and identically distributed.\n\n### 9.1.2 Sub-District -- Bale Kambang\n\n\n::: {.cell}\n\n:::\n\n\nNow, we plot the results\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nThe tau value is greater than 0 indicating a monotonic increasing trend. Further, p-value is 0.01 which is \\< 0.05 hence p-value is significant. This result tells us that here is an overall upward (positive) trend. This means that as time passes, the Gi\\* value will increase, thus a higher clustering of high vaccination rate. That is more people will be getting their vaccine.\n\n### 9.1.3 Sub-District -- Kamal\n\n\n::: {.cell}\n\n:::\n\n\nNow, we plot the results\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n:::\n\n\nThe tau value (-0.84) is negative, indicating a strong monotonic decreasing trend. The p-value is 0.0001 which is \\< 0.05 hence p-value is significant. This result tells us that here is an overall negative trend. As time passes by, the Gi\\* value will decrease, thus a higher clustering of low vaccination rate. This could either be due to shortage of vaccines or the residents of Kamal are increasingly becoming resistant towards taking vaccine. This is not good, and the issue must be addressed immediately in this pandemic era.\n\n## 9.2 EHSA map of the Gi\\* values of the vaccination rate\n\nIn order for us to find the significant hot and cold spots, we need to conduct the Mann Kendall test on all the subdistricts. Hence, we will conduct this by using the `group_by()` for Sub_Districts.\n\n\n::: {.cell}\n\n:::\n\n\nThen we arrange to show significant emerging hot/cold spots\n\n\n::: {.cell}\n\n:::\n\n\nLastly, we will perform EHSA analysis by using [`emerging_hotspot_analysis()`](https://sfdep.josiahparry.com/reference/emerging_hotspot_analysis.html) of sfdep package. It takes a spacetime object x (i.e. vacc_rate_st), and the quoted name of the variable of interest (i.e. Vaccinaton Rate) for .var argument. The k argument is used to specify the number of time lags which is set to 1 by default. Lastly, nsim map numbers of simulation to be performed.\n\n\n::: {.cell}\n\n:::\n\n\nWe then visualize the distribution of the EHSA classes\n\n\n::: {.cell}\n\n:::\n\n\nFigure above shows that sporadic hot spots class has the high numbers of sub-districts.\n\nBefore, we visualise the geographic distribution EHSA classes, we need to combine `jakarta` and `ehsa` together\n\n\n::: {.cell}\n\n:::\n\n\nNext, tmap functions will be used to plot a categorical choropleth map by using the code chunk below.\n\n\n::: {.cell}\n\n:::\n\n\nBelow are the meanings of the terms -\n\n-   Oscilating hotspot - It refers to a spatial pattern where a location or area alternates between being a hot spot (i.e., having a statistically significant high value) and a cold spot (i.e., having a statistically significant low value) over time. These hot-spots have an increasing trend in intensity over time.\n\n-   Oscilating coldspot - It refers to areas that consistently experience lower values or intensity than surrounding areas, but the intensity levels in these areas fluctuate over time. They have a decreasing trend over time.\n\n-   Sporadic coldspot - Sub-disticts which exhibits unusually low values for vaccination rate, as compared to its surrounding areas.\n\n-   No pattern detected - Sub-districts that do not fall into any hot or cold spot patterns\n\nThe maps shows the largest number of oscillating hotspots which are located evenly in Jakarta. This means that there is a fluctuation between people getting vaccine with people not being able to get vaccine. This could be due to shortage of vaccines sometimes. This is followed by Spordiac coldspot (lesser than oscillating hotspots), which is quite spread out in Jakarta. These have extremely low vaccination rate and hence, needs to be looked at immediately. This is lastly followed by Oscilating coldspot which appear to be more around the border and in the central of Jakarta. Lastly, there are areas with no pattern detected, these are mainly located in the central area. Further, the sub-districts with p-value \\> 0.05 are in grey colour as they are insignificant.\n\n# 10.0 Conclusion\n\nThe analysis of Jakarta's sub-districts vaccination rate is important as it provides valuable insights into the spatial patterns of vaccination coverage in different areas. By using the above techniques, we can identify areas where vaccination rates are low and where more vaccination campaigns are required. It also helps to identify areas where vaccination campaigns have been successful. We have identified hotspots or coldspots where targeted interventions may be required to improve the coverage of the vaccine. This can help policymakers make informed decisions about where to allocate resources and where to focus vaccination campaigns. It can also help in identifying the areas where vaccine hesitancy or lack of access to healthcare services may be contributing to low vaccination rates. Overall, the analysis of vaccination rates in Jakarta's sub-districts is crucial for effective planning and implementation of vaccination programs, and for achieving higher vaccination coverage rates.\n\n# 11.0 References\n\nThank your Prof. Kim for all the resources and insightful Hands-On and Take-Home Excercises. Special thanks goes to the Senior Sample Submissions that Prof. Kam recommended!\n",
    "supporting": [
      "Take-Home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}