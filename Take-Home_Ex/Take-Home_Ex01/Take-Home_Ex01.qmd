---
title: "Take-Home Excercise 01"
author: "Mayuri Salunke"
date: "30 January 2023"
date-modified: "`r Sys.Date()`"
execute: 
  echo: true
  eval: true
  message: false
  warning: false
editor: visual
---

# 1.0 Overview

-   Talk about water situation in Nigeria

-   Talk about water situation in Oson state

-   Talk about the Osun river and its myth

-   Objective of the assignment and elaborate

![Osun River](https://naijabiography.com/wp-content/uploads/2022/06/goPzeHTDsWsUImM-1600x900-noPad.jpg){fig-align="center"}

# 2.0 Setup

## 2.1 Packages Used

-   sf : Used for ..

-   tidyverse : Used for ..

-   tmap :

-   spatstat :

-   raster :

-   maptools :

-   rgdal :

-   

```{r}
pacman::p_load(sf, maptools, raster, spatstat, tmap, kableExtra, tidyverse, funModeling)
```

## 2.2 Datasets Used

```{r}
# initialise a dataframe of our geospatial and aspatial dataset details
datasets <- data.frame(
  Type=c("Geospatial",
         "Geospatial",
         "Geospatial",
         "Geospatial",
         "Geospatial",
         "Geospatial",
         "Geospatial",
         "Geospatial",
         "Geospatial",
         "Geospatial",
         "Geospatial",
         "Geospatial",
         "Geospatial",
         "Geospatial",
         
         "Aspatial"),
  
  Name=c("geoBoundaries-NGA-ADM2",
         "geoBoundaries-NGA-ADM2",
         "geoBoundaries-NGA-ADM2",
         "geoBoundaries-NGA-ADM2",
         "geoBoundaries-NGA-ADM2",
         "geoBoundaries-NGA-ADM2",
         "nga_admbnda_adm2_osgof_20190417",
         "nga_admbnda_adm2_osgof_20190417",
         "nga_admbnda_adm2_osgof_20190417",
         "nga_admbnda_adm2_osgof_20190417",
         "nga_admbnda_adm2_osgof_20190417",
         "nga_admbnda_adm2_osgof_20190417",
         "nga_admbnda_adm2_osgof_20190417",
         "nga_admbnda_adm2_osgof_20190417",
         
         "WPdx"),
  
  Format=c(".dbf", 
           ".geojson", 
           ".prj", 
           ".shp", 
           ".shx", 
           ".topojson",
           ".CPG",
           ".dbf",
           ".prj",
           ".sbn", 
           ".sbx", 
           ".shp", 
           ".shp", 
           ".shx", 
          
           ".csv"),
  
  Source=c("[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)",
           "[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)",
           "[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)",
           "[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)",
           "[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)",
           "[geoBoundaries](https://www.geoboundaries.org/index.html#getdata)",
           
          "[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)",
           "[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)",
           "[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)",
           "[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)",
           "[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)",
           "[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)",
           "[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)",
           "[Humanitarian Data Exchange](https://data.humdata.org/dataset/cod-ab-nga)",
           
           "[ WPdx Global Data Repositories](https://www.waterpointdata.org/access-data/)")
  )

# with reference to this guide on kableExtra:
# https://cran.r-project.org/web/packages/kableExtra/vignettes/awesome_table_in_html.html
# kable_material is the name of the kable theme
# 'hover' for to highlight row when hovering, 'scale_down' to adjust table to fit page width
library(knitr)
library(kableExtra)
kable(datasets, caption="Datasets Used") %>%
  kable_material("hover", latex_options="scale_down")
```

# 3.0 Data Wrangling : Geospatial Data

## 3.1 Importing Geospatial Data

```{r}
NGA <- st_read("data/geospatial", 
                  layer = "nga_admbnda_adm2_osgof_20190417") %>%
  filter(ADM1_EN == "Osun") %>%
  st_transform(crs = 26392)
```

(Talk about CRS)

## 3.2 Data Pre-processing

### 3.2.1 Dropping Invalid Dimensions

There are no invalid dimensions, so not required

### 3.2.2 Invalid Geometries

```{r}
length(which(st_is_valid(NGA) == FALSE))
```

None of the values are Invalid, so we are good to go!!

### 3.2.3 Excluding Redundant Fields

Whyy do we remove thesee redundant fields??

```{r}
NGA <- NGA %>%
  select(c(3:4, 8:9))
```

### 3.2.4 Missing Values

```{r}
NGA[rowSums(is.na(NGA))!=0,]
```

### 3.2.5 Checking for Duplicated Names

```{r}
NGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]
```

### 3.2.6 Initial Visualization

```{r}
plot(st_geometry(NGA))
```

# 4.0 Data Wrangling : Aspatial Data

## 4.1 Importing Aspatial Data

```{r}
wp_nga <- read_csv("data/aspatial/WPdx.csv") %>%
  filter(`#clean_country_name` == "Nigeria" & `#clean_adm1` == "Osun")
```

## **4.2 Converting water point data into sf point features**

Converting an aspatial data into an sf data.frame involves two steps.

First, we need to convert the [wkt](https://en.wikipedia.org/wiki/Well-known_text_representation_of_geometry) field into sfc field by using `st_as_sfc()` data type.

```{r}
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
wp_nga
```

Next, we will convert the tibble data.frame into an sf object by using `st_sf()`. It is also important for us to include the referencing system of the data into the sf object.

```{r}
wp_sf <- st_sf(wp_nga, crs=4326)
wp_sf
```

```{r}
wp_sf <- wp_sf %>%
  st_transform(crs = 26392)
```

## 4.3 Data Wrangling for Water Data Point

```{r}
freq(data = wp_sf,
     input = '#status_clean')
```

```{r}
wp_sf_nga <- wp_sf %>% 
  rename(status_clean = '#status_clean') %>%
  select(status_clean) %>%
  mutate(status_clean = replace_na(
    status_clean, "unknown"))
```

### 4.3.1 Extracting Water Point Data

Now we are ready to extract the water point data according to their status.

The code chunk below is used to extract functional water point.

```{r}
wp_functional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Functional",
             "Functional but not in use",
             "Functional but needs repair"))
```

The code chunk below is used to extract nonfunctional water point.

```{r}
wp_nonfunctional <- wp_sf_nga %>%
  filter(status_clean %in%
           c("Abandoned/Decommissioned",
             "Abandoned",
             "Non-Functional due to dry season",
             "Non-Functional",
             "Non functional due to dry season"))
```

The code chunk below is used to extract water point with unknown status.

```{r}
wp_unknown <- wp_sf_nga %>%
  filter(status_clean == "unknown")
```

Performing a quick EDA on the derived sfa.dataframes

```{r}
freq(data = wp_functional,
     input = 'status_clean')
```

```{r}
freq(data = wp_nonfunctional,
     input = 'status_clean')
```

```{r}
freq(data = wp_unknown,
     input = 'status_clean')
```

### 4.3.2 Performing Point-In Polygon Count

Next, we want to find out the number of total, functional, nonfunctional and unknown water points in each LGA. This is performed in the following code chunk. First, it identifies the functional water points in each LGA by using `st_intersects()` of sf package. Next, `length()` is used to calculate the number of functional water points that fall inside each LGA.

```{r}
NGA_wp <- NGA %>% 
  mutate(`total_wp` = lengths(
    st_intersects(NGA, wp_sf_nga))) %>%
  mutate(`wp_functional` = lengths(
    st_intersects(NGA, wp_functional))) %>%
  mutate(`wp_nonfunctional` = lengths(
    st_intersects(NGA, wp_nonfunctional))) %>%
  mutate(`wp_unknown` = lengths(
    st_intersects(NGA, wp_unknown)))
NGA_wp
```

We then visualise attributes by using statistcal graph. In this code chunk below, appropriate functions of [**ggplot2**](https://ggplot2.tidyverse.org/) package is used to reveal the distribution of total water points by LGA in histogram.

```{r}
ggplot(data = NGA_wp,
       aes(x = total_wp)) + 
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue") +
  geom_vline(aes(xintercept=mean(
    total_wp, na.rm=T)),
             color="red", 
             linetype="dashed", 
             size=0.8) +
  ggtitle("Distribution of total water points by LGA") +
  xlab("No. of water points") +
  ylab("No. of\nLGAs") +
  theme(axis.title.y=element_text(angle = 0))
```

# 5.0 Combined Data Wrangling : Geospatial & Aspatial Data

## 5.1 Converting sf data frames to sp's Spatial\* Class

```{r}
wp_functional_spatial = as_Spatial(wp_functional)
wp_nonfunctional_spatial = as_Spatial(wp_nonfunctional)
NGA_spatial <- as_Spatial(NGA)
```

```{r}
NGA_spatial
```

```{r}
wp_functional_spatial
```

```{r}
wp_nonfunctional_spatial
```

## 5.2 Converting from Spatial\* classes to sp format

```{r}
# convert into respective sp (in our case, either polygons or points)
wp_functional_sp <- as(wp_functional_spatial, "SpatialPoints")
wp_nonfunctional_sp <- as(wp_nonfunctional_spatial, "SpatialPoints")
NGA_sp <-as(NGA_spatial, "SpatialPolygons")
```

```{r}
wp_functional_sp
```

```{r}
wp_nonfunctional_sp
```

```{r}
NGA_sp
```

## 5.3 **Converting from sp format to spatstat ppp format**

Note that there is no way of coercing SpatialPolygons to ppp format - nor is there any need to. As such, we won't be including our 'base maps', geoNGA and NGA.

```{r}
# from sp object, convert into ppp format
wp_functional_ppp <- as(wp_functional_sp, "ppp")
wp_nonfunctional_ppp <- as(wp_nonfunctional_sp, "ppp")
```

```{r}
par(mfrow=c(1,2))
plot(wp_nonfunctional_ppp)
plot(wp_functional_ppp)
```

### 5.3.1 Handling Duplicated Points + Jittering

```{r}
any(duplicated(wp_functional_ppp)) 
```

```{r}
any(duplicated(wp_nonfunctional_ppp)) 
```

Since there is no duplication, we dont have to apply the process of Jittering.

## 5.4 Creating Owin Object

```{r}
NGA_owin <- as(NGA_sp, "owin")
plot(NGA_owin)
```

## **5.5 Combining point events object and owin object**

```{r}
wp_functional_ppp = wp_functional_ppp[NGA_owin]
wp_nonfunctional_ppp = wp_nonfunctional_ppp[NGA_owin]
```

```{r}
par(mfrow=c(1,2))
plot(wp_nonfunctional_ppp)
plot(wp_functional_ppp)
```

# 6.0 Exploratory Spatial Data Analysis

Talk about what we are going to do here, and what is the objectivee

## 6.1 Kernel Density Estimation

### 6.1.1 Computing Kernel Density Estimation

**Computing using Automatic Bandwidth selection method**

Explain (Hands on ex 5)

```{r}
kde_wpfunctional_bw <- density(wp_functional_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
kde_wpnonfunctional_bw <- density(wp_nonfunctional_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 

par(mfrow=c(1,2))
plot(kde_wpfunctional_bw,
     main = "Functional Water Points",
     ribside=c("right"))
plot(kde_wpnonfunctional_bw,
     main = "Non-Functional Water Points",
     ribside=c("right"))
```

**Computing using Adaptive Bandwidth selection method**

```{r}
kde_wpfunctional_adaptive <- adaptive.density(wp_functional_ppp, method="kernel")

kde_wpnonfunctional_adaptive <- adaptive.density(wp_nonfunctional_ppp, method="kernel")

par(mfrow=c(1,2))
plot(kde_wpfunctional_adaptive,
     main = "Functional Water Points",
     ribside=c("right"))
plot(kde_wpnonfunctional_adaptive,
     main = "Non-Functional Water Points",
     ribside=c("right"))
```

**Comparing Automated and Adapting Bandwith Methods (side-by-side)**

```{r}
par(mfrow=c(1,2))
plot(kde_wpfunctional_bw,
     main = "Functional Water Points",
     ribside=c("right"))
plot(kde_wpfunctional_adaptive,
     main = "Non-Functional Water Points",
     ribside=c("right"))
```

```{r}
par(mfrow=c(1,2))
plot(kde_wpnonfunctional_bw,
     main = "Functional Water Points",
     ribside=c("right"))
plot(kde_wpnonfunctional_adaptive,
     main = "Non-Functional Water Points",
     ribside=c("right"))
```

### 6.1.2 Rescalling KDE Values

As we can those values are small, so *rescale()* is used to covert the unit of measurement from meter to kilometer. ELABORATEE

```{r}
wp_functional_ppp_km <- rescale(wp_functional_ppp, 1000, "km")
wp_nonfunctional_ppp_km <- rescale(wp_nonfunctional_ppp, 1000, "km")
```

Now we replot the graphs

::: panel-tabset
Automated Bandwitch Method

```{r}
kde_wpfunctional_km <- density(wp_functional_ppp_km,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 
kde_wpnonfunctional_km <- density(wp_nonfunctional_ppp_km,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian") 

par(mfrow=c(1,2))
plot(kde_wpfunctional_bw,
     main = "Functional Water Points",
     ribside=c("right"))
plot(kde_wpnonfunctional_bw,
     main = "Non-Functional Water Points",
     ribside=c("right"))

```

Adaptive Bandwidth Method

```{r}
kde_wpfunctional_adaptive_km <- adaptive.density(wp_functional_ppp_km, method="kernel")

kde_wpnonfunctional_adaptive_km <- adaptive.density(wp_nonfunctional_ppp_km, method="kernel")

par(mfrow=c(1,2))
plot(kde_wpfunctional_adaptive,
     main = "Functional Water Points",
     ribside=c("right"))
plot(kde_wpnonfunctional_adaptive,
     main = "Non-Functional Water Points",
     ribside=c("right"))

```
:::

## 6.2 Converting KDE output into grid object

```{r}
gridded_wpfunctional <- as.SpatialGridDataFrame.im(kde_wpfunctional_km)
gridded_wpnonfunctional <- as.SpatialGridDataFrame.im(kde_wpnonfunctional_km)

spplot(gridded_wpfunctional)
spplot(gridded_wpnonfunctional)
```

### 6.2.1 Converting Gridded Output into Raster

```{r}
kde_wpfunctional_raster <- raster(gridded_wpfunctional)
kde_wpfunctional_raster
```

```{r}
kde_wpnonfunctional_raster <- raster(gridded_wpnonfunctional)
kde_wpnonfunctional_raster
```

### 6.2.2 Assigning Projection Systems

```{r}
projection(kde_wpfunctional_raster) <- CRS("+init=EPSG:26392 +datum:WGS84 +units=km")
kde_wpfunctional_raster
```

```{r}
projection(kde_wpnonfunctional_raster) <- CRS("+init=EPSG:26392 +datum:WGS84 +units=km")
kde_wpnonfunctional_raster
```

## 6.3 Kernel Density Maps on OpenStreetMap

Now, as the assignment requirements has specified, we should plot our kernel density maps on OpenStreetMap, aiming to describe the spatial patterns revealed as well as highlight the advantage of kernel density map over point map. Since we'll be plotting a lot of kernel density maps, let's create a function:

```{r}
density_map <- function(raster_object, map_title) {
  tmap_mode("view")
  tm_basemap("OpenStreetMap") +
tm_shape(raster_object) +
  tm_raster("v", alpha=0.9) + 
  tm_layout(legend.position = c("right", "bottom"), 
            legend.height = 0.5, 
            legend.width = 0.4,
            main.title = map_title,
            main.title.position = 'center',
            main.title.size = 1,
            frame = TRUE) + 
  tm_view(set.zoom.limits = c(8, 13))
  } 
```

```{r}
kde_wpfunctional_density_map <- density_map(kde_wpfunctional_raster, map_title = "Functional Water Points in Osun State")
kde_wpnonfunctional_density_map <- density_map(kde_wpnonfunctional_raster, map_title = "Non-Functional Water Points in Osun State")
```

```{r}
kde_wpfunctional_density_map
```

```{r}
kde_wpnonfunctional_density_map
```

```{r}
tmap_mode('plot')
tm_basemap("OpenStreetMap") +
tm_shape(kde_wpfunctional_raster) +
  tm_raster("v")
```

```{r}
tmap_mode('plot')
tm_basemap("OpenStreetMap") +
tm_shape(kde_wpnonfunctional_raster) +
  tm_raster("v")
```

```{r}

```

## 6.4 Kernel Density Maps Analysis

As we can see in the map in 5.5, both the plots are similar with the Functional Water Point being comparatively a bit more denser (more point) than the Non-Functional Water Point. From the maps above, we can see that both the Functional and Non-Functional waterpoints are spread out, however, they are more concentrated in the center and the upper part of Osun. We don't see that many waterpoints in lower part of Osun.

The Functional Water Points are slightly more spread out compared to the Non Functional Water Points, however, what is interesting to note is that the points in both the maps kind of coincide with each other. That is the points in the Functional Water Point seem to be close to that of the Non-Functional Water Point.

## 6.5 Advantage of Kernel Density Map over Point Map

To understand the advantage of Kernel Density Map over Point Map, we first need to plot the two and compare the differences.

```{r}
tmap_mode("plot")
tm_shape(NGA_wp) +
  tm_borders(alpha = 0.5) +
  tmap_options(check.and.fix = TRUE) +
tm_shape(wp_nonfunctional) +
  tm_dots(col="red", size=0.05) +
  tm_layout(main.title = "Non-Functional Water Points",
          main.title.position = "center",
          main.title.size = 1.2,
          frame = TRUE)
```

```{r}
kde_wpnonfunctional_density_map
```

With the Kernel Density Map, denser areas with a heavier distribution of Non-Functional Water Points are easily spotted. This is because the kernel density z-estimate helps to smooth out the points in a given area. Compared to the point map which just shows the points. Further, the gradient colour available (ranging from yellow to green) helps in understanding the density/concentration of water pumps in the area. It clearly shows the viewer which are the areas with more non-functional water pumps, however, with the point map, the users have to gauge/estimate which are the densers with more non-functional water points.

Hence to conclude, the Kernal Density provides a quantitative value representing the concentration of points, where as this can only be observed/gauged in Point Map.

-   *With kernel density maps, it takes into account the inverse-distance-weighted counts of points, to represent the concentration of points at a particular location. This cannot be achieved through observation using point maps.*

-   *The inverse-distance-weighted counts is important because in the real-world, childcare centres that are further away from a particular location does not mean that they cannot potentially serve the population. These points should still be taken into account, just that points further away should just be given less weight, as people will have to travel further to access the childcare service. This is exactly what is accounted for with kernel function.*

## 6.6?? Nearest Neighbour Analysis

The 95% confident interval will be used.

The test hypotheses for Functional Water Point is :

**H~0~ :** The distribution of Functional Water Point in Osun State is randomly distributed.

**H~1~ :** The distribution of Functional Water Point in Osun State is not randomly distributed.

```{r}
clarkevans.test(wp_functional_ppp,
                correction="none",
                clipregion="NGA_owin",
                alternative=c("clustered"),
                nsim=99)
```

**Conclusion :**

The test hypotheses for Non-Functional Water Point is :

**H~0~ :** The distribution of Non-Functional Water Point in Osun State is randomly distributed.

**H~1~ :** The distribution of Non-Functional Water Point in Osun State is not randomly distributed.

```{r}
clarkevans.test(wp_nonfunctional_ppp,
                correction="none",
                clipregion="nga_owin",
                alternative=c("clustered"),
                nsim=99)
```

**Conclusion :**

## 6.7 Colocation of Functional and Non-Functional Water Points

```{r}
wp_sf_withoutUnknown <- wp_sf_nga %>%  filter(!status_clean=='unknown')
```

```{r}
# This is required for Take Home Excercise 3
nb <- include_self(
  st_knn(st_geometry(wp_sf_withoutUnknown),6))

wt <- st_kernel_weights(nb,
                        wp_sf_withoutUnknown,
                        "gaussian",
                        adaptive = TRUE)

#FamilyMart <- stores %>%
#  filter(Name == "Family Mart")
#A <- FamilyMart$Name

#wp_functional <- wp_sf_nga %>%
#  filter(status_clean %in%
#           c("Functional",
#             "Functional but not in use",
#             "Functional but needs repair"))
A <- wp_functional$status_clean

#SevenEleven <- stores %>%
#  filter(Name == "7-Eleven")
B <- wp_nonfunctional$status_clean

# LCLQ is a datable. You dont have a unique identifier.
LCLQ <- local_colocation(A, B, nb, wt, 49)

# The cbind only works if your dont sort the results (LCLQ). 
LCLQ_stores <- cbind(wp_sf_withoutUnknown, LCLQ)
```

```{r}
tmap_mode("view")
tm_shape(NGA) + 
  tm_polygons() + 
  tm_shape(LCLQ_stores)+
    tm_dots(col = "Non.Functional",
            size = 0.05,
            border.col = "grey",
            border.lwd = 0.5) + 
  tm_view(set.zoom.limits = c(8,11))
```

```{r}
tmap_mode("view")
tm_shape(NGA) + 
  tm_polygons() + 
  tm_shape(LCLQ_stores)+
    tm_dots(col = "Abandoned",
            size = 0.05,
            border.col = "grey",
            border.lwd = 0.5) + 
  tm_view(set.zoom.limits = c(9,13))
```

```{r}
tmap_mode("view")
tm_shape(NGA) + 
  tm_polygons() + 
  tm_shape(LCLQ_stores)+
    tm_dots(col = "Non.Functional.due.to.dry.season",
            size = 0.05,
            border.col = "grey",
            border.lwd = 0.5) + 
  tm_view(set.zoom.limits = c(9,11))
```

The above maps show the colocation of Functional Water Points and Non-Functional Water Points. ELABORATEEE MOREE

# 7.0 Second-order Spatial Point Patterns Analysis

For Functional Water Point in Osun Sate

-   **H0: The distribution of the** Functional Water Point**s are randomly distributed**

-   **H1: The distribution of the** Functional Water Points **are not randomly distributed**

-   **Confidence level : 99%**

-   **Significance level : 0.01 *In light that 0.05 is the most common level of significance, I've decided to make it slightly stricter and use 0.01 - I believe a 1% risk of an incorrect hypothesis is good enough, especially considering the trade-offs between sensitivity and false positives for this hypothesis testing***

For Non-Functional Water Point in Osun Sate

-   **H0: The distribution of the Non-**Functional Water Point**s are randomly distributed**

-   **H1: The distribution of the Non-**Functional Water Points **are not randomly distributed**

-   **Confidence level : 99%**

-   **Significance level : 0.01 *In light that 0.05 is the most common level of significance, I've decided to make it slightly stricter and use 0.01 - I believe a 1% risk of an incorrect hypothesis is good enough, especially considering the trade-offs between sensitivity and false positives for this hypothesis testing***

## 7.1 Analysing Spatial Point Process Using G-Function

### 7.1.1 Functional Water Point

Computing G-function estimation

```{r}
G_wp_functional = Gest(wp_functional_ppp, correction = "border")
plot(G_wp_functional, xlim=c(0,500))
```

Performing Complete Spatial Randomness Test

```{r}
G_wp_functional.csr <- envelope(wp_functional_ppp, Gest, nsim = 999)
```

```{r}
plot(G_wp_functional.csr)
```

**Conclusion:** The observed G(r) is far above the G(theo) as well as the envelope - indicating that Functional Water Points are clustered. Hence, we reject the null hypothesis that Functional Water Points are randomly distributed at 99% confident interval.

### 7.1.2 Non-Functional Water Point

Computing G-function estimation

```{r}
G_wp_nonfunctional = Gest(wp_nonfunctional_ppp, correction = "border")
plot(G_wp_nonfunctional, xlim=c(0,500))
```

Performing Complete Spatial Randomness Test

```{r}
G_wp_nonfunctional.csr <- envelope(wp_functional_ppp, Gest, nsim = 999)
```

```{r}
plot(G_wp_nonfunctional.csr)
```

**Conclusion:** The observed G(r) is far above the G(theo) as well as the envelope - indicating that Non Functional Water Points are clustered. Hence, we reject the null hypothesis that Non Functional Water Points are randomly distributed at 99% confident interval.

## 7.2 Analysing Spatial Point Process using F-Function

### 7.2.1 Functional Water Points

Computing F-function estimation

```{r}
#F_wp_functional = Fest(wp_functional_ppp)
#plot(F_wp_functional)
```

Performing Complete Spatial Randomness Test

```{r}
#F_wp_functional.csr <- envelope(wp_functional_ppp, Fest, nsim = 999)
```

```{r}
#plot(F_wp_functional.csr)
```

### 7.2.2 Non-Functional Water Points

Computing F-function estimation

```{r}
#F_wp_nonfunctional = Fest(wp_nonfunctional_ppp, correction="best")
#plot(F_wp_functional)
```

Performing Complete Spatial Randomness Test

```{r}
#F_wp_nonfunctional.csr <- envelope(wp_nonfunctional_ppp, Fest, nsim = 999)
```

```{r}
#plot(F_wp_nonfunctional.csr)
```

## 7.3 Analysing Spatial Point Process Using K-Function

### 7.3.1 Functional Water Point

Computing K-function estimate

```{r}
#K_wp_functional = Kest(wp_functional_ppp, correction = "Ripley")
#plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

Performing Complete Spatial Randomness

```{r}
#K_wp_functional.csr <- envelope(wp_functional_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
#plot(K_wp_functional.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

### 7.3.1 Non-Functional Water Point

Computing K-function estimate

```{r}
#K_wp_nonfunctional = Kest(wp_nonfunctional_ppp, correction = "Ripley")
#plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

Performing Complete Spatial Randomness

```{r}
#K_wp_nonfunctional.csr <- envelope(wp_nonfunctional_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
#plot(K_wp_nonfunctional.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

## 7.4 Analysing Spatial Point Process using L-Function

### 7.4.1 Functional Water Point

Computing L-function estimate

```{r}
#L_wp_functional = Lest(wp_functional_ppp, correction = "Ripley")
#plot(L_wp_functional, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

Performing Complete Spatial Randomness

```{r}
#L_wp_functional.csr <- envelope(wp_functional_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
#plot(L_wp_functional.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

### 7.4.1 Non-Functional Water Point

Computing L-function estimate

```{r}
#L_wp_nonfunctional = Lest(wp_nonfunctional_ppp, correction = "Ripley")
#plot(L_tm, . -r ~ r, 
     #ylab= "L(d)-r", xlab = "d(m)", 
     #xlim=c(0,1000))
```

Performing Complete Spatial Randomness

```{r}
#L_wp_nonfunctional.csr <- envelope(wp_nonfunctional_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
```

```{r}
#plot(L_wp_nonfunctional.csr, . - r ~ r, 
     #xlab="d", ylab="L(d)-r", xlim=c(0,500))
```

Analysis :

# 8.0 Spatial Correlation Analysis

8.1 Data Pre-Processing

Convert sf data frames to sp's Spatial class

```{r}
wp_spatial <- as_Spatial(wp_sf_nga)
```

Convert spatial class into generic sp class

```{r}
wp_sp <- as(wp_spatial, "SpatialPoints")
```

Converting generic sp format into spatstat's ppp format

```{r}
wp_ppp <- as(wp_sp, "ppp")
wp_ppp
```

```{r}
plot(wp_ppp)
```

Analysing Spatial Point using L-Function

# 9.0 Acknowledgments
