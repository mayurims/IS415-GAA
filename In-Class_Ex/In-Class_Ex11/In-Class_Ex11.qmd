---
title: "In-Class Excercise 11"
date: "`r Sys.Date()`"
format: html
execute:
  message: false
  warning: false
editor: visual
---

# Getting Started

```{r}
pacman::p_load(tmap, sf, sp, stplanr, 
               reshape2, broom, performance,
               gtsummary, ggpubr, tidyverse)
```

# Preparing Data Flow

## Importing the OD Data

Firstly, we will import the *Passenger Volume by Origin Destination Bus Stops* data set downloaded from LTA DataMall by using `read_csv()` of **readr** package.

```{r}
odbus <- read_csv("data/aspatial/origin_destination_bus_202210.csv")
```

A quick check of odbus tibble data frame shows that the values in OROGIN_PT_CODE and DESTINATON_PT_CODE are in numeric data type. Hence, the code chunk below is used to convert these data values into character data type.

```{r}
odbus$ORIGIN_PT_CODE <- as.factor(odbus$ORIGIN_PT_CODE)
odbus$DESTINATION_PT_CODE <- as.factor(odbus$DESTINATION_PT_CODE) 
```

## Extracting the Study Data

```{r}
odbus7_9 <- odbus %>%
  filter(DAY_TYPE == "WEEKDAY") %>%
  filter(TIME_PER_HOUR >= 7 &
           TIME_PER_HOUR <= 9) %>%
  group_by(ORIGIN_PT_CODE,
           DESTINATION_PT_CODE) %>%
  summarise(TRIPS = sum(TOTAL_TRIPS))
```

```{r}
write_rds(odbus7_9, "data/rds/odbus7_9.rds")
```

```{r}
odbus7_9 <- read_rds("data/rds/odbus7_9.rds")
```

# Working with Geospatial Data

## Importing Geospatial Data

```{r}
busstop <- st_read(dsn = "data/geospatial",
                   layer = "BusStop") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz <- st_read(dsn = "data/geospatial",
                   layer = "MPSZ-2019") %>%
  st_transform(crs = 3414)
```

```{r}
mpsz
```

# Geospatial Data Wrangling

## Combining Bus stop and and mpsz

Code chunk below populates the planning subzone code (i.e.Â SUBZONE_C) of mpsz sf data frame into busstop sf data frame.

```{r}
busstop_mpsz <- st_intersection(busstop, mpsz) %>%
  select(BUS_STOP_N, SUBZONE_C) %>%
  st_drop_geometry()
```

```{r}
write_rds(busstop_mpsz, "data/rds/busstop_mpsz.csv")  
```

```{r}
od_data <- left_join(odbus7_9 , busstop_mpsz,
            by = c("ORIGIN_PT_CODE" = "BUS_STOP_N")) %>%
  rename(ORIGIN_BS = ORIGIN_PT_CODE,
         ORIGIN_SZ = SUBZONE_C,
         DESTIN_BS = DESTINATION_PT_CODE)
```

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

```{r}
od_data <- unique(od_data)
```

```{r}
od_data <- left_join(od_data , busstop_mpsz,
            by = c("DESTIN_BS" = "BUS_STOP_N")) 
```

```{r}
duplicate <- od_data %>%
  group_by_all() %>%
  filter(n()>1) %>%
  ungroup()
```

```{r}
od_data <- unique(od_data)
```

```{r}
od_data <- od_data %>%
  rename(DESTIN_SZ = SUBZONE_C) %>%
  drop_na()
```

```{r}
write_rds(od_data, "data/rds/od_data.rds")
```

```{r}
od_data <- read_rds("data/rds/od_data.rds")
```

# Visualising the Geospatial Data

```{r}
#| eval: false
tmap_mode("plot")
tmap_options(check.and.fix = TRUE)
qtm(mpsz)
```

## Viewing the Subzone spatial file

```{r}
head(mpsz, 10)
```

# **Isolating SUBZONE_C (subzone_code) into a new df**

```{r}
mpsz <- mpsz[order(mpsz$SUBZONE_C),]
head(mpsz, 10)
```

## **Computing Distance Matrix**

The are at least two ways to compute the required distance matrix. One is based on sf and the other is based on sp. Past experience shows that computing distance matrix by using sf function took relatively longer time that sp method. In view of this, sp method is used in the code chunks below.

### **Converting from sf data.table to SpatialPolygonDataFrame**

```{r}
mpsz_sp <- as(mpsz, "Spatial")
```

### **Computing the distance matrix**

```{r}
dist <- spDists(mpsz_sp)
dist 
```

### **Sorting the distance matrix by plannint sub-zone code**

```{r}
sz_names <- mpsz$SUBZONE_C
```

### **Attaching SUBZONE_C to row and column for distance matrix matching ahead**

```{r}
colnames(dist) <- paste0(sz_names)
rownames(dist) <- paste0(sz_names)
```

### **Pivoting distance value by SUBZONE_C**

```{r}
distPair <- melt(dist) %>%
  rename(dist = value)
head(distPair, 10)
```

### **Updating intra-zonal distances**

```{r}
distPair %>%
  filter(dist > 0) %>%
  summary()
```

A constant distance value of 50m is added into intra-zones

```{r}
distPair$dist <- ifelse(distPair$dist == 0,
                        50, distPair$dist)
```

```{r}
distPair %>%
  summary()
```

```{r}
distPair <- distPair %>%
  rename(orig = Var1,
         dest = Var2)
```

```{r}
write_rds(distPair, "data/distPair.rds") 
```

## **Preparing flow data**

```{r}
od_data <- read_rds("data/rds/od_data.rds")
```

```{r}
flow_data <- od_data %>%
  group_by(ORIGIN_SZ, DESTIN_SZ) %>% 
  summarize(TRIPS = sum(TRIPS)) 
```

```{r}
head(flow_data, 10)
```

### **Separating intra-flow from passenger volume df**

```{r}
flow_data$FlowNoIntra <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0, flow_data$TRIPS)
flow_data$offset <- ifelse(
  flow_data$ORIGIN_SZ == flow_data$DESTIN_SZ, 
  0.000001, 1)
```

### **Combining passenger volume data with distance value**

```{r}
flow_data$ORIGIN_SZ <- as.factor(flow_data$ORIGIN_SZ)
flow_data$DESTIN_SZ <- as.factor(flow_data$DESTIN_SZ)
```

```{r}
flow_data1 <- flow_data %>%
  left_join (distPair,
             by = c("ORIGIN_SZ" = "orig",
                    "DESTIN_SZ" = "dest"))
```

## **Visualising Spatial Interaction**

### **Removing intra-zonal flows**

```{r}
flow_data1 <- flow_data1[flow_data1$ORIGIN_SZ!=flow_data1$DESTIN_SZ,]
```

```{r}
OD_data <- flow_data1[,c(1,2,3)]
```

### **Creating desire lines**

In this code chunk below, `od2line()` of **stplanr** package is used to create the desire lines.

```{r}
flowLine <- od2line(flow = OD_data, 
                    zones = mpsz,
                    zone_code = "SUBZONE_C")
```

### **Visualising the desire lines**

To visualise the resulting desire lines, the code chunk below is used.

```{r}
#| eval: false
tm_shape(mpsz) +
  tm_polygons() +
tm_shape(flowLine) +
  tm_lines(lwd = "TRIPS",
           style = "quantile",
           scale = c(0.1, 1, 3, 5, 10),
           n = 5,
           alpha = 0.1)
```

## **Preparing Origin and Destination Attributes**

### **Importing population data**

```{r}
pop <- read_csv("data/aspatial/pop.csv")
```

### **Geospatial data wrangling**

```{r}
pop <- pop %>%
  left_join(mpsz,
            by = c("PA" = "PLN_AREA_N",
                   "SZ" = "SUBZONE_N")) %>%
  select(1:6) %>%
  rename(SZ_NAME = SZ,
         SZ = SUBZONE_C)
```

### **Preparing origin attribute**

```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(ORIGIN_SZ = "SZ")) %>%
  rename(ORIGIN_AGE7_12 = AGE7_12,
         ORIGIN_AGE13_24 = AGE13_24,
         ORIGIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```

### **Preparing destination attribute**

```{r}
flow_data1 <- flow_data1 %>%
  left_join(pop,
            by = c(DESTIN_SZ = "SZ")) %>%
  rename(DESTIN_AGE7_12 = AGE7_12,
         DESTIN_AGE13_24 = AGE13_24,
         DESTIN_AGE25_64 = AGE25_64) %>%
  select(-c(PA, SZ_NAME))
```

```{r}
write_rds(flow_data1, "data/rds/SIM_data")
```
